<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RedHat on Maksym Postument</title><link>https://mpostument.com/tags/redhat/</link><description>Recent content in RedHat on Maksym Postument</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 27 Sep 2022 21:39:08 +0300</lastBuildDate><atom:link href="https://mpostument.com/tags/redhat/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible Inventory</title><link>https://mpostument.com/2022/09/27/ansible-inventory/</link><pubDate>Tue, 27 Sep 2022 21:39:08 +0300</pubDate><guid>https://mpostument.com/2022/09/27/ansible-inventory/</guid><description>Part 1 - Manage Ansible Versions With pyenv
Hello!
Today I will show you what inventory in Ansible and how to use them.
Ansible has two types of inventory - static and dynamic. Static is used when we know in advance the list of servers on which Ansible should run. And dynamic when we do not have this data in advance and we want to receive it dynamically.
Static inventory To use static inventory, it is enough to simply create a file, for example, inventory, and inside you can specify IP addresses, for example:</description><content>&lt;p>&lt;a href="https://mpostument.com/2022/09/19/manage-ansible-versions-with-pyenv/" title="Part 1 - Manage Ansible Versions With pyenv">Part 1 - Manage Ansible Versions With pyenv&lt;/a>&lt;/p>
&lt;p>Hello!&lt;/p>
&lt;p>Today I will show you what inventory in Ansible and how to use them.&lt;/p>
&lt;p>Ansible has two types of inventory - static and dynamic. Static is used when we know in advance the list of servers on which Ansible should run. And dynamic when we do not have this data in advance and we want to receive it dynamically.&lt;/p>
&lt;h2 id="static-inventory">Static inventory&lt;/h2>
&lt;p>To use static inventory, it is enough to simply create a file, for example, &lt;code>inventory&lt;/code>, and inside you can specify IP addresses, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>192.168.1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This can be used immediately by specifying this file in the ansible command using &lt;code>-i inventory all&lt;/code>. &lt;code>all&lt;/code> means to run ansible on all servers from the inventory file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ansible -m ping -i inventory all --private-key SSH_KEY --user SSH_USER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ping&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Servers can also be combined into groups.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>web&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>database&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now you can run ansible only for some group. To do this, you need to specify the name of the group instead of &lt;code>all&lt;/code>. If you need to run for all servers, you can specify &lt;code>all&lt;/code> again.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ansible -m ping -i inventory web --private-key SSH_KEY --user SSH_USER
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ping&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also specify a set of parameters for each server or group in the inventory. For example, the value that we passed using the &amp;ndash;user key can be specified in the inventory.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>web&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1 ansible_user&lt;span style="color:#f92672">=&lt;/span>centos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the &amp;ndash;user key can be omitted&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ansible -m ping -i inventory web --private-key SSH_KEY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1 | SUCCESS &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ansible_facts&amp;#34;&lt;/span>: &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;discovered_interpreter_python&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/bin/python&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;changed&amp;#34;&lt;/span>: false,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ping&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pong&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also, parameters can be set at the group level, for this, you need to add another group with a name like[GROUP_NAME:vars]&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>web&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>web:vars&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible_user&lt;span style="color:#f92672">=&lt;/span>centos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result will be the same as in the previous version, only now these parameters will be applied to this group.&lt;/p>
&lt;p>Any values that will be used in playbooks in the future can be passed as parameters.&lt;/p>
&lt;p>Also, several groups can be added to one group.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>web&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>db&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.1.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>webdb:children&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And if I specify -i inventory webdb when running ansible, ansible will run for all servers from those two groups.&lt;/p>
&lt;h2 id="group-vars">Group Vars&lt;/h2>
&lt;p>Inventory is not the best place to store parameters. It is better to create a folder called group_vars and organize parameters for each group in it. The group can be organized as a folder or a file. In this example, I created a folder with a name that corresponds to the name of the group and inside a file that can have any name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>tree group_vars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>group_vars
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── web
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └── web
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In file web now i can add variables which will be used for group web&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">ansible_user&lt;/span>: &lt;span style="color:#ae81ff">centos&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And if I run ansible, I get the same result as last time.&lt;/p>
&lt;h2 id="dynamic-inventory">Dynamic Inventory&lt;/h2>
&lt;p>Dynamic inventory is needed if we do not know the IP addresses in advance. For example, with AWS, where servers can often change and have different IP addresses. Dynamic inventory is a script that is passed to the -i parameter, and when this script is run, I will get all the necessary information about the servers. Some dynamic inventories have become part of ansible and do not need to be downloaded additionally, it is enough to simply indicate that it needs to be used.&lt;/p>
&lt;p>To use AWS dynamic inventory, you need to install an additional python library called boto3. It can be installed using &lt;code>pip install boto3&lt;/code>.&lt;/p>
&lt;p>Since AWS dynamic inventory is part of ansible, no scripts need to be downloaded. But you need to create a configuration file aws_ec2.yml. The simplest one will look like this. And specify this file with -i key&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">plugin&lt;/span>: &lt;span style="color:#ae81ff">aws_ec2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">regions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">REGION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">boto_profile&lt;/span>: &lt;span style="color:#ae81ff">AWS_PROFILE&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, ansible will be launched on all servers that are in this AWS account in the specified region. You can use filters to filter only the servers you want. For example, only servers that have the type = database tag.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">plugin&lt;/span>: &lt;span style="color:#ae81ff">aws_ec2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">regions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">REGION&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">boto_profile&lt;/span>: &lt;span style="color:#ae81ff">AWS_PROFILE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">filters&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tag:type&lt;/span>: &lt;span style="color:#ae81ff">database&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Filters can be combined. All possible options can be found in the documentation of a specific dynamic plugin(&lt;a href="https://docs.ansible.com/ansible/latest/collections/amazon/aws/aws_ec2_inventory.html#examples">AWS docs&lt;/a>).&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/k74GIVucO_Y" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></content></item><item><title>Manage Ansible Versions With pyenv</title><link>https://mpostument.com/2022/09/19/manage-ansible-versions-with-pyenv/</link><pubDate>Mon, 19 Sep 2022 10:54:18 +0300</pubDate><guid>https://mpostument.com/2022/09/19/manage-ansible-versions-with-pyenv/</guid><description>Hello!
This is the first post in the series about Ansible, in which I will show how you can manage versions of Ansible and Python using pyenv.
Pyenv pyenv allows you to install different versions of python and also create a virtual env in which ansible will be installed.
To install pyenv, you need to execute the command
git clone https://github.com/pyenv/pyenv.git ~/.pyenv and add pyenv to PATH
echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.</description><content>&lt;p>Hello!&lt;/p>
&lt;p>This is the first post in the series about Ansible, in which I will show how you can manage versions of Ansible and Python using pyenv.&lt;/p>
&lt;h2 id="pyenv">Pyenv&lt;/h2>
&lt;p>&lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a> allows you to install different versions of python and also create a virtual env in which ansible will be installed.&lt;/p>
&lt;p>To install pyenv, you need to execute the command&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/pyenv/pyenv.git ~/.pyenv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and add pyenv to PATH&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;command -v pyenv &amp;gt;/dev/null || export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;eval &amp;#34;$(pyenv init -)&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the shell is restarted, the &lt;code>pyenv&lt;/code> command will be available. But to create a virtualenv, you need an additional &lt;a href="https://github.com/pyenv/pyenv-virtualenv">plugin&lt;/a> that can be installed using the command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git clone https://github.com/pyenv/pyenv-virtualenv.git &lt;span style="color:#66d9ef">$(&lt;/span>pyenv root&lt;span style="color:#66d9ef">)&lt;/span>/plugins/pyenv-virtualenv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You also need to install certain &lt;a href="https://github.com/pyenv/pyenv/wiki#suggested-build-environment">packages&lt;/a> for python to compile. For ubuntu it will be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that everything is ready, you can install the required version of python and ansible. Before ansible 2.5 there was support only for python 2, from a version higher than 2.5 you can use python 3. I will install python 3 and ansible version 2.10.&lt;/p>
&lt;h2 id="install-python">Install python&lt;/h2>
&lt;p>To view available versions of python, you can execute the &lt;code>pyenv install --list&lt;/code> command&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pyenv install --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Available versions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.1.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.2.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.3.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.4.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2.5.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the desired python version is selected, it can be installed using &lt;code>pyenv install PYTHON_VERSION&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pyenv install 3.10.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Downloading Python-3.10.7.tar.xz...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-&amp;gt; https://www.python.org/ftp/python/3.10.7/Python-3.10.7.tar.xz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Installing Python-3.10.7...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Installed Python-3.10.7 to /home/maksym/.pyenv/versions/3.10.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ansible can be installed now, but if several versions are required, it will be difficult to do so. Since the versions will overwrite each other. It is better to use virtualenv. It can be created using &lt;code>pyenv virtualenv PYTHON_VERSION VIRTUALENV_NAME&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pyenv virtualenv 3.10.7 ansible-2.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When a virtualenv is created it needs to be activated, and this is how you can have multiple versions of ansible installed, with a separate virtualenv for each ansible version.&lt;/p>
&lt;p>You can activate virtualenv using the &lt;code>pyenv activate VIRTUALENV_NAME&lt;/code> command&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>pyenv activate ansible-2.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you are ready to install ansible. This can be done using the &lt;code>pip install PACKAGE_NAME&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pip install ansible&lt;span style="color:#f92672">==&lt;/span>2.10.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting ansible&lt;span style="color:#f92672">==&lt;/span>2.10.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading ansible-2.10.7.tar.gz &lt;span style="color:#f92672">(&lt;/span>29.9 MB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 29.9/29.9 MB 8.3 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Preparing metadata &lt;span style="color:#f92672">(&lt;/span>setup.py&lt;span style="color:#f92672">)&lt;/span> ... &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting ansible-base&amp;lt;2.11,&amp;gt;&lt;span style="color:#f92672">=&lt;/span>2.10.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading ansible-base-2.10.17.tar.gz &lt;span style="color:#f92672">(&lt;/span>6.1 MB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.1/6.1 MB 9.5 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Preparing metadata &lt;span style="color:#f92672">(&lt;/span>setup.py&lt;span style="color:#f92672">)&lt;/span> ... &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting jinja2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Using cached Jinja2-3.1.2-py3-none-any.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">133&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting PyYAML
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading PyYAML-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">682&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 682.2/682.2 kB 8.6 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting cryptography
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading cryptography-38.0.1-cp36-abi3-manylinux_2_28_x86_64.whl &lt;span style="color:#f92672">(&lt;/span>4.2 MB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.2/4.2 MB 9.9 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting packaging
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading packaging-21.3-py3-none-any.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">40&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 40.8/40.8 kB 3.0 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting cffi&amp;gt;&lt;span style="color:#f92672">=&lt;/span>1.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading cffi-1.15.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">441&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 441.8/441.8 kB 8.9 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting MarkupSafe&amp;gt;&lt;span style="color:#f92672">=&lt;/span>2.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading MarkupSafe-2.1.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">25&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting pyparsing!&lt;span style="color:#f92672">=&lt;/span>3.0.5,&amp;gt;&lt;span style="color:#f92672">=&lt;/span>2.0.2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Downloading pyparsing-3.0.9-py3-none-any.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">98&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 98.3/98.3 kB 6.2 MB/s eta 0:00:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Collecting pycparser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Using cached pycparser-2.21-py2.py3-none-any.whl &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">118&lt;/span> kB&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using legacy &lt;span style="color:#e6db74">&amp;#39;setup.py install&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> ansible, since package &lt;span style="color:#e6db74">&amp;#39;wheel&amp;#39;&lt;/span> is not installed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using legacy &lt;span style="color:#e6db74">&amp;#39;setup.py install&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> ansible-base, since package &lt;span style="color:#e6db74">&amp;#39;wheel&amp;#39;&lt;/span> is not installed.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Installing collected packages: PyYAML, pyparsing, pycparser, MarkupSafe, packaging, jinja2, cffi, cryptography, ansible-base, ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Running setup.py install &lt;span style="color:#66d9ef">for&lt;/span> ansible-base ... &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Running setup.py install &lt;span style="color:#66d9ef">for&lt;/span> ansible ... &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Successfully installed MarkupSafe-2.1.1 PyYAML-6.0 ansible-2.10.7 ansible-base-2.10.17 cffi-1.15.1 cryptography-38.0.1 jinja2-3.1.2 packaging-21.3 pycparser-2.21 pyparsing-3.0.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ansible is now ready to use&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ ansible --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ansible 2.10.17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config file &lt;span style="color:#f92672">=&lt;/span> None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configured module search path &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/home/maksym/.ansible/plugins/modules&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;/usr/share/ansible/plugins/modules&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ansible python module location &lt;span style="color:#f92672">=&lt;/span> /home/maksym/.pyenv/versions/3.10.7/envs/ansible-2.10/lib/python3.10/site-packages/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> executable location &lt;span style="color:#f92672">=&lt;/span> /home/maksym/.pyenv/versions/ansible-2.10/bin/ansible
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> python version &lt;span style="color:#f92672">=&lt;/span> 3.10.7 &lt;span style="color:#f92672">(&lt;/span>main, Sep &lt;span style="color:#ae81ff">19&lt;/span> 2022, 11:11:49&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>GCC 9.4.0&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need to install another version of ansible, you can deactivate virtualenv, create a new one and install ansible&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ pyenv deactivate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pyenv virtualenv 3.10.7 ansible-2.9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip install ansible&lt;span style="color:#f92672">==&lt;/span>2.9.27
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/pBobhqJrKZg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></content></item></channel></rss>