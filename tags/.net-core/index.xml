<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net Core on mpostument.com</title><link>/tags/.net-core/</link><description>Recent content in .Net Core on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Oct 2020 13:42:30 +0300</lastBuildDate><atom:link href="/tags/.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Three Ways to Organize Code in BlazorServer</title><link>/2020/10/13/three-ways-to-organize-code/</link><pubDate>Tue, 13 Oct 2020 13:42:30 +0300</pubDate><guid>/2020/10/13/three-ways-to-organize-code/</guid><description>Hello!
I want to show you how you can organize code in BlazorServer.
Code in client The first option is to store the code on the client (in a razor file). Take the Counter.razor file which combines html and c# code.
@page &amp;#34;/counter&amp;#34; &amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt; &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; @onclick=&amp;#34;IncrementCount&amp;#34;&amp;gt;Click me&amp;lt;/button&amp;gt; @code { private int currentCount = 0; private void IncrementCount() { currentCount++; } } This page has a private currentCount variable and an IncrementCount method that increments this variable.</description></item><item><title>Create Page in Blazor</title><link>/2020/10/12/create-page-in-blazor/</link><pubDate>Mon, 12 Oct 2020 11:57:31 +0300</pubDate><guid>/2020/10/12/create-page-in-blazor/</guid><description>Hello!
Today we will look at how you can create a new page in BlazorServer and add it to the menu.
Add new page To do this, right-click on the Pages folder and select Razor Component...
The following window will appear in which you need to enter the name and click Add.
The page will be created with the following content:
&amp;lt;h3&amp;gt;Test1&amp;lt;/h3&amp;gt; @code { } To be able to open it in the browser at the beginning of the file you need to add @page&amp;quot; /test1&amp;quot; where test1 is the name of the endpoint.</description></item><item><title>Blazor Server Logging</title><link>/2020/10/10/blazor-server-logging/</link><pubDate>Sat, 10 Oct 2020 19:01:49 +0300</pubDate><guid>/2020/10/10/blazor-server-logging/</guid><description>Hi!
Today we will see how to configure logging in BlazorServer. Immediately after creating a project, the appsettings.json file will be in the root of the project.
{ &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; } }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34; } This is where logging settings are set. LogLevel starts with Default which have value Information. This means that the default log level will be Information. Next is Microsoft with the Warning level, respectively for namespace Microsoft the login level will be Warning.</description></item><item><title>Blazor Dependency Injection</title><link>/2020/10/07/blazor-dependency-injection/</link><pubDate>Wed, 07 Oct 2020 21:15:25 +0300</pubDate><guid>/2020/10/07/blazor-dependency-injection/</guid><description>Hi!
Today we will talk about how dependency injection works in blazor server. If you are familiar with dependency injection in asp.net core then there are no differences.
Dependency injection is configured in Startup.cs at the root of the project. After creating the project, it will look like this
public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;(); } Let&amp;rsquo;s see what happens here. services.AddRazorPages() - adds razor pages support to the project services.</description></item><item><title>Blazor Server Error Handling</title><link>/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/2020/10/06/blazor-server-error-handling/</guid><description>Hello!
Today we will look at how you can change the error messages in Blazor Server. There are two types of errors page does not exist and exception. You can change the message that will be displayed in both cases. The first thing to consider is how to change the message displayed to the user in the case of exception.
Exception Error In the Pages/_Host.cshtml file, this section is responsible for displaying the error:</description></item><item><title>Blazor Server Routing</title><link>/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/2020/10/01/blazor-server-routing/</guid><description>Hello! Today I want to tell you how routing works in Blazor Server.
Routing starts in the Startup.cs file. The following code will responsible for it
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); came from asp.net and adds route matching to the middleware pipeline. This middleware looks at the set of endpoints defined in the app, and selects the best match based on the request.
app.UseEndpoints() adds endpoint execution to the middleware pipeline.</description></item><item><title>Build Dotnet Core With Travis</title><link>/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/2020/08/31/build-dotnet-core-with-travis/</guid><description>Hello!
Today I want to show how you can build and deploy .net core with Travis.
To get started, you need to create a Travis account. This requires you to login with your GitHub account. .travis.yml Configuration The next step is to create a .travis.yml file in the root of the repository.
Example of my configuration file:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description></item></channel></rss>