<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net on mpostument.com</title><link>/tags/.net/</link><description>Recent content in .Net on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Oct 2020 19:31:30 +0300</lastBuildDate><atom:link href="/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Server Error Handling</title><link>/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/2020/10/06/blazor-server-error-handling/</guid><description>Hello!
Today we will look at how you can change the error messages in Blazor Server. There are two types of errors page does not exist and exception. You can change the message that will be displayed in both cases. The first thing to consider is how to change the message displayed to the user in the case of exception.
Exception Error In the Pages/_Host.cshtml file, this section is responsible for displaying the error:</description></item><item><title>Blazor Server Routing</title><link>/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/2020/10/01/blazor-server-routing/</guid><description>Hello! Today I want to tell you how routing works in Blazor Server.
Routing starts in the Startup.cs file. The following code will responsible for it
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); came from asp.net and adds route matching to the middleware pipeline. This middleware looks at the set of endpoints defined in the app, and selects the best match based on the request.
app.UseEndpoints() adds endpoint execution to the middleware pipeline.</description></item><item><title>Build Dotnet Core With Travis</title><link>/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/2020/08/31/build-dotnet-core-with-travis/</guid><description>Hello!
Today I want to show how you can build and deploy .net core with Travis.
To get started, you need to create a Travis account. This requires you to login with your GitHub account. .travis.yml Configuration The next step is to create a .travis.yml file in the root of the repository.
Example of my configuration file:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description></item></channel></rss>