<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on mpostument.com</title><link>/tags/devops/</link><description>Recent content in Devops on mpostument.com</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 16 Sep 2020 20:24:40 +0300</lastBuildDate><atom:link href="/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy to ec2 with codedship</title><link>/2020/09/16/deploy-to-ec2-with-codeship/</link><pubDate>Wed, 16 Sep 2020 20:24:40 +0300</pubDate><guid>/2020/09/16/deploy-to-ec2-with-codeship/</guid><description>Hi there!
Today I want to show how you can deploy code on AWS EC2 using CodeShip Basic. To do this, I will use the integration of Codeship with AWS CodeDeploy.
CodeShip Configuration First you need to add a repository to CodeShip and go to the Deploy page Add a branch from which code will be deployed to ec2. In my case, the branch is master. Once the branch is added you need to scroll down to the Deployment section.</description></item><item><title>Get Lambdas in Vpc With Go</title><link>/2020/09/01/get-lambdas-in-vpc-with-go/</link><pubDate>Tue, 01 Sep 2020 17:40:16 +0300</pubDate><guid>/2020/09/01/get-lambdas-in-vpc-with-go/</guid><description>Hi there!
Today I want to tell you how with go you can get a list of all AWS Lambda that are in the VPC. First you need to install golang. The latest version can be downloaded from the official website.
Once golang is installed, create a folder for the scripts mkdir awsscripts
Next you need to initialize the go.mod file. This file stores all the dependencies on external packages, and at the same time will make the go code module.</description></item><item><title>Build Dotnet Core With Travis</title><link>/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/2020/08/31/build-dotnet-core-with-travis/</guid><description>Hello!
Today I want to show how you can build and deploy .net core with Travis.
To get started, you need to create a Travis account. This requires you to login with your GitHub account. .travis.yml Configuration The next step is to create a .travis.yml file in the root of the repository.
Example of my configuration file:
language:csharpmono:nonedotnet:3.1.4solution:awstaghelper.slninstall:- dotnetrestorescript:- dotnetbuild--configurationRelease--runtimewin-x64--outputwin-x64- dotnetbuild--configurationRelease--runtimewin-x86--outputwin-x86- dotnetbuild--configurationRelease--runtimelinux-x64--outputlinux-x64- dotnetbuild--configurationRelease--runtimeosx-x64--outputosx-x64before_deploy:- zip-r9win-x64.zipwin-x64- zip-r9win-x86.zipwin-x86- zip-r9linux-x64.ziplinux-x64- zip-r9osx-x64.ziposx-x64deploy:provider:releasesapi_key:$api_keyfile:- win-x64.zip- win-x86.zip- linux-x64.zip- osx-x64.</description></item></channel></rss>