<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on mpostument.com</title><link>/ua/categories/c#/</link><description>Recent content in C# on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Oct 2020 19:04:41 +0300</lastBuildDate><atom:link href="/ua/categories/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Server Authorization</title><link>/ua/2020/10/17/blazor-server-authorization/</link><pubDate>Sat, 17 Oct 2020 19:04:41 +0300</pubDate><guid>/ua/2020/10/17/blazor-server-authorization/</guid><description>Привіт!
Сьогодні подивимось як добавити авторизацію в Blazor Server. Для початку створимо новий проект в якому включемо автентифікацію.
В проекті з автентифікацією присутні декілька додаткових файлів, які відповідають за автентифікацію. Також в конфігураційному файлі буде добавлено connection string до бази даних.
&amp;#34;ConnectionStrings&amp;#34;: { &amp;#34;DefaultConnection&amp;#34;: &amp;#34;Server=(localdb)\\mssqllocaldb;Database=aspnet-BlazorAuth-BD4B8646-B1A3-438C-8FFC-8C3A29438C24;Trusted_Connection=True;MultipleActiveResultSets=true&amp;#34; }, В package management консолі потрібно запустити команду Update-Database для того щоб створити базу даних та потрібні таблиці.
Тепер можна запустити аплікацію і спробувати залогуватись.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні подивимось як добавити авторизацію в Blazor Server.
Для початку створимо новий проект в якому включемо автентифікацію.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AlAyKDU.png" alt="Auth">&lt;/p>
&lt;p>В проекті з автентифікацією присутні декілька додаткових файлів, які відповідають за автентифікацію. Також в конфігураційному файлі буде добавлено connection string до бази даних.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#e6db74">&amp;#34;ConnectionStrings&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;span style="color:#f92672">&amp;#34;DefaultConnection&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Server=(localdb)\\mssqllocaldb;Database=aspnet-BlazorAuth-BD4B8646-B1A3-438C-8FFC-8C3A29438C24;Trusted_Connection=True;MultipleActiveResultSets=true&amp;#34;&lt;/span>
}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В package management консолі потрібно запустити команду &lt;code>Update-Database&lt;/code> для того щоб створити базу даних та потрібні таблиці.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KxYmGW2.png" alt="Update-Database">&lt;/p>
&lt;p>Тепер можна запустити аплікацію і спробувати залогуватись.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/81FVZaw.gif" alt="Login">&lt;/p>
&lt;p>Тепер можна добавити ролі для того щоб обмежувати доступ до певних сторінок в залежності від ролі.&lt;/p>
&lt;h2 id="autorization">Autorization&lt;/h2>
&lt;p>Підтримку ролей потрібно добавити в &lt;code>Startup.cs&lt;/code> в методі &lt;code>ConfigureService&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(options =&amp;gt; options.SignIn.RequireConfirmedAccount = &lt;span style="color:#66d9ef">true&lt;/span>)
.AddRoles&amp;lt;IdentityRole&amp;gt;()
.AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generate-roles">Generate Roles&lt;/h2>
&lt;p>Добавлю новий razor компонент в папку &lt;code>Pages&lt;/code>. При переходні на цю сторінку буду створюватись базові ролі, вона буде доступна за шляхом &lt;code>/addroles&lt;/code>. Також потрібно за допомогою DI взяти декілька обєктів.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/addroles&amp;#34;&lt;/span>
@using Microsoft.AspNetCore.Identity
@inject RoleManager&amp;lt;IdentityRole&amp;gt; RoleManager
@inject UserManager&amp;lt;IdentityUser&amp;gt; UserManager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Створювати ролі буду за допомогою &lt;code>RoleManager&lt;/code>. Для початку створити список в якому будуть всі потрібні ролі. Далі іду циклом по усіх ролях, якщо роль існує то нічого не відбудеться. Якщо ж ні то нова роль буде створена.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task GenerateRoles()
{
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> adminRole = &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">string&lt;/span>[] roles = { AdminRole };
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> role &lt;span style="color:#66d9ef">in&lt;/span> roles)
{
&lt;span style="color:#66d9ef">var&lt;/span> roleExist = &lt;span style="color:#66d9ef">await&lt;/span> RoleManager.RoleExistsAsync(role);
&lt;span style="color:#66d9ef">if&lt;/span> (roleExist == &lt;span style="color:#66d9ef">false&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> RoleManager.CreateAsync(&lt;span style="color:#66d9ef">new&lt;/span> IdentityRole(role));
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-admin">Create admin&lt;/h2>
&lt;p>Наступним кроком потрібно додати користувачів до ролей. В &lt;code>appsettings.json&lt;/code> я добавлю параметр який буде містити email дефолтного адміна.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;777rip777@gmail.com&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Повернусь назад до &lt;code>addroles&lt;/code> сторінки і створю новий метод. Перевіряю чи користувач з емейлом з конфігураційног файлу існує, якщо так то добавляю його в групу &lt;code>Administrator&lt;/code>. Для того щоб можна було прочитати дані з конфігураційного файлу потрібо отримати об&amp;rsquo;єкт типу &lt;code>IConfiguration&lt;/code>. Вверху сторінки добавити &lt;code>@using Microsoft.Extensions.Configuration&lt;/code> i &lt;code>@inject IConfiguration config&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task AddAdmin()
{
&lt;span style="color:#66d9ef">var&lt;/span> user = &lt;span style="color:#66d9ef">await&lt;/span> UserManager.FindByEmailAsync(config.GetValue&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>));
&lt;span style="color:#66d9ef">if&lt;/span> (user != &lt;span style="color:#66d9ef">null&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> UserManager.AddToRoleAsync(user, &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для того щоб ці методи викликались при відкриті сторінки потрібно викликати їх в методі &lt;code>OnParametersSetAsync&lt;/code>.&lt;/p>
&lt;p>Повний код &lt;code>addroles&lt;/code> сторінки&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/addroles&amp;#34;&lt;/span>
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Configuration
@inject RoleManager&amp;lt;IdentityRole&amp;gt; RoleManager
@inject UserManager&amp;lt;IdentityUser&amp;gt; UserManager
@inject IConfiguration config
@code {
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task OnParametersSetAsync()
{
&lt;span style="color:#66d9ef">await&lt;/span> GenerateRoles();
&lt;span style="color:#66d9ef">await&lt;/span> AddAdmin();
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task GenerateRoles()
{
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> adminRole = &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">string&lt;/span>[] roles = { adminRole };
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> role &lt;span style="color:#66d9ef">in&lt;/span> roles)
{
&lt;span style="color:#66d9ef">var&lt;/span> roleExist = &lt;span style="color:#66d9ef">await&lt;/span> RoleManager.RoleExistsAsync(role);
&lt;span style="color:#66d9ef">if&lt;/span> (roleExist == &lt;span style="color:#66d9ef">false&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> RoleManager.CreateAsync(&lt;span style="color:#66d9ef">new&lt;/span> IdentityRole(role));
}
}
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task AddAdmin()
{
&lt;span style="color:#66d9ef">var&lt;/span> user = &lt;span style="color:#66d9ef">await&lt;/span> UserManager.FindByEmailAsync(config.GetValue&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>));
&lt;span style="color:#66d9ef">if&lt;/span> (user != &lt;span style="color:#66d9ef">null&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> UserManager.AddToRoleAsync(user, &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер відкривши в браузері сторінку &lt;code>/addroles&lt;/code> роль буде створена та користувач (якщо існує) буде добавлений в неї.&lt;/p>
&lt;h2 id="restrict-access-to-pages">Restrict access to pages&lt;/h2>
&lt;p>Тепер коли в нас є ролі можна обмежити доступ до сторінок. Для сторінки &lt;code>FetchData&lt;/code> я добавлю &lt;code>@attribute [Authorize]&lt;/code>. Це дасть доступ до сторінки тільки авторизованим користувачам. А для сторінки &lt;code>Counter&lt;/code> я вкажу &lt;code>@attribute [Authorize(Roles = &amp;quot;Administrator&amp;quot;)]&lt;/code> це дасть доступ до сторінки тільки користувачам з ролю адміністратор.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KkE10dm.gif" alt="RolesDemo">&lt;/p>
&lt;p>Замінити Not Autorized помилку можна в &lt;code>App.razor&lt;/code> в &lt;code>NotAutorized&lt;/code> секції.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;CascadingAuthenticationState&amp;gt;
&amp;lt;Router AppAssembly=&lt;span style="color:#e6db74">&amp;#34;@typeof(Program).Assembly&amp;#34;&lt;/span>&amp;gt;
&amp;lt;Found Context=&lt;span style="color:#e6db74">&amp;#34;routeData&amp;#34;&lt;/span>&amp;gt;
&amp;lt;AuthorizeRouteView RouteData=&lt;span style="color:#e6db74">&amp;#34;@routeData&amp;#34;&lt;/span> DefaultLayout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NotAuthorized&amp;gt;
&amp;lt;h1&amp;gt;You don&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t have access&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Ask your administrator to give you permission&amp;lt;/p&amp;gt;
&amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeRouteView&amp;gt; /&amp;gt;
&amp;lt;/Found&amp;gt;
&amp;lt;NotFound&amp;gt;
&amp;lt;LayoutView Layout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;p&amp;gt;Sorry, there&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s nothing at &lt;span style="color:#66d9ef">this&lt;/span> address.&amp;lt;/p&amp;gt;
&amp;lt;/LayoutView&amp;gt;
&amp;lt;/NotFound&amp;gt;
&amp;lt;/Router&amp;gt;
&amp;lt;/CascadingAuthenticationState&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/wULUE6F.png" alt="AuthError">&lt;/p>
&lt;p>Також можна повністю сховати елемент сайту для не зареєстрованих користувачів. В &lt;code>NavMenu.razor&lt;/code> я добавлю елементи меню в &lt;code>&amp;lt;AuthorizeView&amp;gt;&amp;lt;/AuthorizeView&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;top-row pl-4 navbar navbar-dark&amp;#34;&lt;/span>&amp;gt;
&amp;lt;a class=&lt;span style="color:#e6db74">&amp;#34;navbar-brand&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt;BlazorAuth&amp;lt;/a&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler-icon&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;@NavMenuCssClass&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;ul class=&lt;span style="color:#e6db74">&amp;#34;nav flex-column&amp;#34;&lt;/span>&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> Match=&lt;span style="color:#e6db74">&amp;#34;NavLinkMatch.All&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-home&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Home
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;AuthorizeView Roles=&lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;counter&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-plus&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Counter
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;AuthorizeView&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;fetchdata&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-list-rich&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Fetch data
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> collapseNavMenu = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> NavMenuCssClass =&amp;gt; collapseNavMenu ? &lt;span style="color:#e6db74">&amp;#34;collapse&amp;#34;&lt;/span> : &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ToggleNavMenu()
{
collapseNavMenu = !collapseNavMenu;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер &lt;code>counter&lt;/code> в меню будуть бачити тільки користувачі з ролю &lt;code>Administrator&lt;/code> а &lt;code>fetchdata&lt;/code> буде доступна зареєстрованим користувачам.&lt;/p>
&lt;p>В &lt;code>index&lt;/code> сторінку добавлю повідомлення користувачам щоб залогувались.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&amp;lt;AuthorizeView&amp;gt;
&amp;lt;Authorized&amp;gt;
&amp;lt;h1&amp;gt;Thank you &lt;span style="color:#66d9ef">for&lt;/span> logging &lt;span style="color:#66d9ef">in&lt;/span>&amp;lt;/h1&amp;gt;
&amp;lt;/Authorized&amp;gt;
&amp;lt;NotAuthorized&amp;gt;
&amp;lt;h3 class=&lt;span style="color:#e6db74">&amp;#34;text-danger&amp;#34;&lt;/span>&amp;gt;Log &lt;span style="color:#66d9ef">in&lt;/span> please&amp;lt;/h3&amp;gt;
&amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;AuthorizeView Roles=&lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>&amp;gt;
&amp;lt;Authorized&amp;gt;
Welcome back Admin
&amp;lt;/Authorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Якщо користувача не залоговний буде повідомлення &lt;code>Log in please&lt;/code>. В інакшому випадку &lt;code>Thank you for logging in&lt;/code>. А якщо користувач admin то додатково буде повідомлення &lt;code>Welcome back Admin&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ukU6vYG.gif" alt="RolesDemo2">&lt;/p></content></item><item><title>Blazor Forms</title><link>/ua/2020/10/16/blazor-server-forms/</link><pubDate>Fri, 16 Oct 2020 16:09:30 +0300</pubDate><guid>/ua/2020/10/16/blazor-server-forms/</guid><description>Привіт!
Подивимось як можна створити форму в BlazorServer.
Розпочнемо з моделі. Створю файл Models/User.cs, який буде містити поля для форми.
namespace BlazorLearn.Models { public class User { public string UserName { get; set; } public string LastName { get; set; } public string Email { get; set; } public int Age { get; set; } public string Gender { get; set; } } } Для того щоб модель була доступна для razor компонентів її потрібно добавити в _Imports.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Подивимось як можна створити форму в BlazorServer.&lt;br>
Розпочнемо з моделі. Створю файл &lt;code>Models/User.cs&lt;/code>, який буде містити поля для форми.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Models
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> UserName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LastName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Email { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Age { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Gender { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для того щоб модель була доступна для razor компонентів її потрібно добавити в &lt;code>_Imports.razor&lt;/code>, &lt;code>@using BlazorLearn.Models&lt;/code>.&lt;/p>
&lt;h2 id="basic-form">Basic Form&lt;/h2>
&lt;p>Тепер я створю razor компонент &lt;code>Register.razor&lt;/code> який буде містити в собі форму. Для того щоб форму можна було відкрити в браузері зверху сторінки добавлю &lt;code>@page &amp;quot;/register&amp;quot;&lt;/code>. В code секції потрібно створити новий обєкт класу &lt;code>User&lt;/code>, і також пусту стрінгу в яку буде записано дані після сабміту форми. І добавлю &lt;code>&amp;lt;p&amp;gt;@_formResult&amp;lt;/p&amp;gt;&lt;/code> для того щоб відобразити внесені дані після сабміту.&lt;/p>
&lt;p>Тепер перейдемо до самої форми.&lt;/p>
&lt;p>В blazor форма створюється за допомогою тегу &lt;code>EditForm&lt;/code> в який потрібно передати модель. В нас це об&amp;rsquo;єкт типу &lt;code>User&lt;/code> який створено в секції &lt;code>code&lt;/code> - &lt;code>&amp;lt;EditForm Model=&amp;quot;_user&amp;quot;&amp;gt;&amp;lt;/EditForm&amp;gt;&lt;/code>. Тепер в форму потрібно добавити input поля. Для тексту це буде &lt;code>&amp;lt;InputText&amp;gt;&amp;lt;/InputText&amp;gt;&lt;/code> для інших типів даних є свої теги, наприклад &lt;code>InputNumber&lt;/code> для числових типів. Добавлю інпут поле для кожного елемента з моделі. Також в формі можна викликати метод на івенти типу &lt;code>OnValidSubmit&lt;/code> чи &lt;code>OnInvalidSubmit&lt;/code>. Для цього я зроблю метод &lt;code>HandleValidSubmit&lt;/code> який запише в UserName i LastName з формив пусту стрінгу створену вище.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/register&amp;#34;&lt;/span>
&amp;lt;p&amp;gt;@_formResult&amp;lt;/p&amp;gt;
&amp;lt;EditForm Model=&lt;span style="color:#e6db74">&amp;#34;_user&amp;#34;&lt;/span> OnValidSubmit=&lt;span style="color:#e6db74">&amp;#34;HandleValidSubmit&amp;#34;&lt;/span> On&amp;gt;
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;UserName&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.UserName&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;LastName&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.LastName&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;Email&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Email&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;InputSelect id=&lt;span style="color:#e6db74">&amp;#34;Gender&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Gender&amp;#34;&lt;/span>&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt;Select Gender&amp;lt;/option&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&amp;gt;Male&amp;lt;/option&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;Female&amp;lt;/option&amp;gt;
&amp;lt;/InputSelect&amp;gt;
&amp;lt;InputNumber id=&lt;span style="color:#e6db74">&amp;#34;Age&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Age&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputNumber&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary&amp;#34;&lt;/span> type=&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span>&amp;gt;Submit&amp;lt;/button&amp;gt;
&amp;lt;/EditForm&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> User &lt;span style="color:#ae81ff">_&lt;/span>user = &lt;span style="color:#66d9ef">new&lt;/span> User();
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#ae81ff">_f&lt;/span>ormResult = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> HandleValidSubmit()
{
&lt;span style="color:#ae81ff">_f&lt;/span>ormResult = &lt;span style="color:#e6db74">$&amp;#34;{_user.UserName}, {_user.LastName} was created&amp;#34;&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/Iv4lXzE.gif" alt="FormNoValidation">&lt;/p>
&lt;p>Форма працює, але в полі Age я ввів -30 і ніякої валідації не відбулось. Добавимо тепер валідацію&lt;/p>
&lt;h2 id="form-validation">Form Validation&lt;/h2>
&lt;p>Валідація добавляється за допомогою атрибутів. Повернемось до моделі і внесемо декілька змін.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System.ComponentModel.DataAnnotations;
&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Models
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
{
&lt;span style="color:#a6e22e"> [Required]&lt;/span>
&lt;span style="color:#a6e22e"> [StringLength(maximumLength: 20, MinimumLength = 5, ErrorMessage = &amp;#34;Invalid UserName length&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> UserName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#a6e22e"> [Required]&lt;/span>
&lt;span style="color:#a6e22e"> [StringLength(maximumLength: 10, MinimumLength = 5, ErrorMessage = &amp;#34;Invalid LastName length&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LastName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#a6e22e"> [Required]&lt;/span>
&lt;span style="color:#a6e22e"> [EmailAddress(ErrorMessage = &amp;#34;Provide a valid email address&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Email { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#a6e22e"> [Required]&lt;/span>
&lt;span style="color:#a6e22e"> [Range(1, 100, ErrorMessage = &amp;#34;You need to enter valid range&amp;#34;)]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> Age { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Gender { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер для &lt;code>UserName&lt;/code> та &lt;code>LestName&lt;/code> діє валідація на довжину і також ці поля обов&amp;rsquo;язкові для заповнення. Для &lt;code>Email&lt;/code> добавлена валідація на email адрес. І для &lt;code>Age&lt;/code> добавлена валідація на вік від 1 до 100. Також ці поля є обовязковими. Для поля &lt;code>Gender&lt;/code> ніякої валідації не добавлено.&lt;/p>
&lt;p>Для того щоб валідація відбувалась потрібно добавити &lt;code>&amp;lt;DataAnnotationsValidator&amp;gt;&amp;lt;/DataAnnotationsValidator&amp;gt;&lt;/code> тег в форму.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/fRcczCo.gif" alt="FormNoMessage">&lt;/p>
&lt;p>Тепер валідація працює але ніякі повідомлення не відображаються. Для повідомлень я добавлю ще один тег &lt;code>&amp;lt;ValidationSummary&amp;gt;&amp;lt;/ValidationSummary&amp;gt;&lt;/code>. В результаті форма набуде такого вигляду&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/register&amp;#34;&lt;/span>
&amp;lt;p&amp;gt;@_formResult&amp;lt;/p&amp;gt;
&amp;lt;EditForm Model=&lt;span style="color:#e6db74">&amp;#34;_user&amp;#34;&lt;/span> OnValidSubmit=&lt;span style="color:#e6db74">&amp;#34;HandleValidSubmit&amp;#34;&lt;/span>&amp;gt;
&amp;lt;DataAnnotationsValidator&amp;gt;&amp;lt;/DataAnnotationsValidator&amp;gt;
&amp;lt;ValidationSummary&amp;gt;&amp;lt;/ValidationSummary&amp;gt;
&amp;lt;label&amp;gt;
First Name:
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;UserName&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.UserName&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;
Last Name:
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;LastName&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.LastName&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;
Email:
&amp;lt;InputText id=&lt;span style="color:#e6db74">&amp;#34;Email&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Email&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputText&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;
Gender:
&amp;lt;InputSelect id=&lt;span style="color:#e6db74">&amp;#34;Gender&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Gender&amp;#34;&lt;/span>&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt;Select Gender&amp;lt;/option&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;1&amp;#34;&lt;/span>&amp;gt;Male&amp;lt;/option&amp;gt;
&amp;lt;option &lt;span style="color:#66d9ef">value&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;Female&amp;lt;/option&amp;gt;
&amp;lt;/InputSelect&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;label&amp;gt;
Age:
&amp;lt;InputNumber id=&lt;span style="color:#e6db74">&amp;#34;Age&amp;#34;&lt;/span> @bind-Value=&lt;span style="color:#e6db74">&amp;#34;_user.Age&amp;#34;&lt;/span>&amp;gt;&amp;lt;/InputNumber&amp;gt;
&amp;lt;/label&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary&amp;#34;&lt;/span> type=&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span>&amp;gt;Submit&amp;lt;/button&amp;gt;
&amp;lt;/EditForm&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> User &lt;span style="color:#ae81ff">_&lt;/span>user = &lt;span style="color:#66d9ef">new&lt;/span> User();
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#ae81ff">_f&lt;/span>ormResult = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> HandleValidSubmit()
{
&lt;span style="color:#ae81ff">_f&lt;/span>ormResult = &lt;span style="color:#e6db74">$&amp;#34;{_user.UserName}, {_user.LastName} was created&amp;#34;&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/qgtdGQP.gif" alt="FinalResult">&lt;/p></content></item><item><title>Events in Blazor</title><link>/ua/2020/10/15/events-in-blazor/</link><pubDate>Thu, 15 Oct 2020 11:37:56 +0300</pubDate><guid>/ua/2020/10/15/events-in-blazor/</guid><description>Привіт!
Подивимось як можна передати дані з одного компонента в інший. Для початку я створю дві кнопки при натисканні яких будуть передаватись дані в інший компонент.
Button Я створю компонент з назвою ThumbButton який буде містити дві кнопки. В залежності яка кнопка натиснута буде викликатись відповідний метод і передавати дані в parrent компонент. В @onclick вказується який метод буде викликатись при настискані кнопки.
Для того щоб передати дані в parrent компонент використовується властивість типу EventCallback&amp;lt;Thumb&amp;gt;, де Thumb це enum.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Подивимось як можна передати дані з одного компонента в інший. Для початку я створю дві кнопки при натисканні яких будуть передаватись дані в інший компонент.&lt;/p>
&lt;h2 id="button">Button&lt;/h2>
&lt;p>Я створю компонент з назвою &lt;code>ThumbButton&lt;/code> який буде містити дві кнопки. В залежності яка кнопка натиснута буде викликатись відповідний метод і передавати дані в parrent компонент. В &lt;code>@onclick&lt;/code> вказується який метод буде викликатись при настискані кнопки.&lt;/p>
&lt;p>Для того щоб передати дані в parrent компонент використовується властивість типу &lt;code>EventCallback&amp;lt;Thumb&amp;gt;&lt;/code>, де &lt;code>Thumb&lt;/code> це enum. Замість enum може бути будь який інший тип даних. В метод &lt;code>ThumbUp&lt;/code> i &lt;code>ThumbDown&lt;/code> викликаю &lt;code>OnVote.InvokeAsync&lt;/code> в який передається відповідний enum. Цей виклик передає дані в parrent компонент.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary mx-2&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ThumbUp&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-thumb-up&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-danger mx-2&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ThumbDown&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-thumb-down&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
@code {
&lt;span style="color:#66d9ef">public&lt;/span> EventCallback&amp;lt;Thumb&amp;gt; OnVote { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ThumbUp()
{
OnVote.InvokeAsync(Thumb.Up);
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ThumbDown()
{
OnVote.InvokeAsync(Thumb.Down);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Thumb
{
Up,
Down
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер цей компонент можна перевикористати на будь якій сторінці.&lt;/p>
&lt;h2 id="button-component-on-page">Button Component on page&lt;/h2>
&lt;p>Тепер візьмемо сторінку &lt;code>Counter&lt;/code>. І добавимо щойно створений компонент з кнопкою. Розпочнемо з коду. Я створю дві властивості &lt;code>isThumbUp&lt;/code> i &lt;code>isThumbDown&lt;/code> типу &lt;code>bool&lt;/code>. В залежності від того яка властивість набуде значення true, відповідні дані будуть відображатись. Також якщо одна з цих властивостей набуде значення &lt;code>true&lt;/code> кнопка зникне.&lt;/p>
&lt;p>Для того щоб отримати дані з компонента кнопки, потрібен хендлер який буде міняти значення &lt;code>isThumbUp&lt;/code> i &lt;code>isThumbDown&lt;/code> у відповідь на натискання кнопки &lt;code>&amp;lt;ThumbButton OnVote=&amp;quot;OnVotedHandler&amp;quot;&amp;gt;&amp;lt;/ThumbButton&amp;gt;&lt;/code>. Метод хендлер має приймати на вхід параметер типу який передається з кнопки. &lt;code>private void OnVotedHandler(ThumbButton.Thumb result)&lt;/code>. В залежності від того яке значення прийшло на вхід встановлюється значення параметрів &lt;code>isThumbUp&lt;/code> i &lt;code>isThumbDown&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/counter&amp;#34;&lt;/span>
&amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;IncrementCount&amp;#34;&lt;/span>&amp;gt;Click me&amp;lt;/button&amp;gt;
@if (isThumbUp)
{
&amp;lt;p class=&lt;span style="color:#e6db74">&amp;#34;text-success&amp;#34;&lt;/span>&amp;gt;Your thumb &lt;span style="color:#66d9ef">is&lt;/span> up&amp;lt;/p&amp;gt;
}
@if (isThumbDown)
{
&amp;lt;p class=&lt;span style="color:#e6db74">&amp;#34;text-danger&amp;#34;&lt;/span>&amp;gt;Your thumb &lt;span style="color:#66d9ef">is&lt;/span> down&amp;lt;/p&amp;gt;
}
@if (!isThumbDown &amp;amp;&amp;amp; !isThumbUp)
{
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;row&amp;#34;&lt;/span>&amp;gt;
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;col-12&amp;#34;&lt;/span>&amp;gt;
&amp;lt;ThumbButton OnVote=&lt;span style="color:#e6db74">&amp;#34;OnVotedHandler&amp;#34;&lt;/span>&amp;gt;&amp;lt;/ThumbButton&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
}
@code
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> isThumbUp = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> isThumbDown = &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> OnVotedHandler(ThumbButton.Thumb result)
{
&lt;span style="color:#66d9ef">if&lt;/span> (result == ThumbButton.Thumb.Up)
{
isThumbUp = &lt;span style="color:#66d9ef">true&lt;/span>;
}
&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (result == ThumbButton.Thumb.Down)
{
isThumbDown = &lt;span style="color:#66d9ef">true&lt;/span>;
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/6Gu761a.gif" alt="EventDemo">&lt;/p></content></item><item><title>Component With Parameters</title><link>/ua/2020/10/14/component-with-parameters/</link><pubDate>Wed, 14 Oct 2020 11:47:34 +0300</pubDate><guid>/ua/2020/10/14/component-with-parameters/</guid><description>Привіт!
Подивимось як можна використовувати компоненти в BlazorServer та передавати параметри в них. Для цього зробимо два класи Student i School які будемо відображати на сторінці. Ці класи будуть в папці Models.
Model using System.Collections.Generic; namespace BlazorLearn.Models { public class School { public string Name { get; set; } public List&amp;lt;Student&amp;gt; Students { get; set; } } } namespace BlazorLearn.Models { public class Student { public string FirstName { get; set; } public string LastName { get; set; } } } Razor Component Тепер я створю razor компоненти які будуть відповідати за відображення даних.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Подивимось як можна використовувати компоненти в BlazorServer та передавати параметри в них.
Для цього зробимо два класи Student i School які будемо відображати на сторінці. Ці класи будуть в папці Models.&lt;/p>
&lt;h2 id="model">Model&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Models
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">School&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> Name { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> List&amp;lt;Student&amp;gt; Students { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Models
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Student&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> FirstName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> LastName { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="razor-component">Razor Component&lt;/h2>
&lt;p>Тепер я створю razor компоненти які будуть відповідати за відображення даних. Для того щоб Models був доступний для razor компонентів потрібно добавити &lt;code>@using BlazorLearn.Models&lt;/code> це можна добавити в &lt;code>_Imports.razor&lt;/code> і тоді Models буде доступний для усіх компонентів або ж добавити в кожний компонент якому потрібна модель.&lt;/p>
&lt;p>Потрібно створити три компонента, перший для відображання інформації про студентів, наступний для інформації про школу і останій це буде сторінка яка буде включати в себе два попередні компоненти.&lt;/p>
&lt;p>Почнемо з компонента - SchoolComponent&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;@SchoolInfo.Name&amp;lt;/p&amp;gt;
@StudentFragment
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#a6e22e"> [Parameter]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> School SchoolInfo { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#a6e22e"> [Parameter]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> RenderFragment StudentFragment { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Кількість коду не велика тому я все зберігатиму в .razor і не буду створювати окремий клас.
В code секції я створюю дві властивості, одна типу &lt;code>School&lt;/code> яка буде містити інформацію про школу а інший типу &lt;code>RenderFragment&lt;/code> ця властивість відбповідатиме за відображення інформації про студентів.&lt;/p>
&lt;p>Наступний компонент - StudentComponent&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;div&amp;gt;
&amp;lt;p&amp;gt;@StudentInfo.FirstName @StudentInfo.LastName&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#a6e22e"> [Parameter]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Student StudentInfo { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Цей компонент має одну властивість типу &lt;code>Student&lt;/code> в якій буде міститись інформація про студента. Html частина буде відображати ім&amp;rsquo;я та прізвище.&lt;/p>
&lt;p>І тепер залишився останій компонент який водночас буде повноціною сторінкою.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/school&amp;#34;&lt;/span>
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;row&amp;#34;&lt;/span>&amp;gt;
@foreach (&lt;span style="color:#66d9ef">var&lt;/span> s &lt;span style="color:#66d9ef">in&lt;/span> Schools)
{
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;col-4&amp;#34;&lt;/span>&amp;gt;
&amp;lt;SchoolComponent SchoolInfo=&lt;span style="color:#e6db74">&amp;#34;@s&amp;#34;&lt;/span>&amp;gt;
&amp;lt;StudentFragment&amp;gt;
@if (s.Students.Count &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>)
{
&amp;lt;h3&amp;gt;Students&amp;lt;/h3&amp;gt;
}
@foreach (&lt;span style="color:#66d9ef">var&lt;/span> stu &lt;span style="color:#66d9ef">in&lt;/span> s.Students)
{
&amp;lt;StudentComponent StudentInfo=&lt;span style="color:#e6db74">&amp;#34;@stu&amp;#34;&lt;/span>&amp;gt;&amp;lt;/StudentComponent&amp;gt;
}
&amp;lt;/StudentFragment&amp;gt;
&amp;lt;/SchoolComponent&amp;gt;
&amp;lt;/div&amp;gt;
}
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#66d9ef">public&lt;/span> List&amp;lt;School&amp;gt; Schools { &lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">public&lt;/span> AllSchools()
{
Schools = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;School&amp;gt;()
{
&lt;span style="color:#66d9ef">new&lt;/span> School()
{
Name = &lt;span style="color:#e6db74">&amp;#34;Hogwarts&amp;#34;&lt;/span>,
Students = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Student&amp;gt;()
{
&lt;span style="color:#66d9ef">new&lt;/span> Student()
{
FirstName = &lt;span style="color:#e6db74">&amp;#34;Harry&amp;#34;&lt;/span>,
LastName = &lt;span style="color:#e6db74">&amp;#34;Potter&amp;#34;&lt;/span>
},
&lt;span style="color:#66d9ef">new&lt;/span> Student()
{
FirstName = &lt;span style="color:#e6db74">&amp;#34;Ron&amp;#34;&lt;/span>,
LastName = &lt;span style="color:#e6db74">&amp;#34;Weasley&amp;#34;&lt;/span>
}
}
},
&lt;span style="color:#66d9ef">new&lt;/span> School()
{
Name = &lt;span style="color:#e6db74">&amp;#34;EmptySchool&amp;#34;&lt;/span>,
Students = &lt;span style="color:#66d9ef">new&lt;/span> List&amp;lt;Student&amp;gt;()
}
};
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Коду тут більше чим в попередніх компонентах тому є смисл винести його в окремий клас. Але я покищо залишу його тут.&lt;br>
В секції code створюється одна властивість типу &lt;code>List&amp;lt;School&amp;gt;&lt;/code> і в конструкторі я добавляю дані в цей список.&lt;/p>
&lt;p>Html частина тут цікавіша, починається вона з &lt;code>@page &amp;quot;/school&amp;quot;&lt;/code> і це дай можливість відкрити в браузері ендпоін /school і потрапити на цю сторінку. Далі йде рендер компонентів. Щоб включити компонент на сторінку достатньо просто вказати &lt;code>&amp;lt;SchoolComponent&amp;gt;&amp;lt;/SchoolComponent&amp;gt;&lt;/code>. Оскільки в нас SchoolComponent приймає властивість &lt;code>SchoolInfo&lt;/code> то я можу його передати за допомогою &lt;code>SchoolInfo=&lt;/code>. Але це не стосується &lt;code>StudentFragment&lt;/code> властивості, вона передається по іншому &lt;code>&amp;lt;StudentFragment&amp;gt;&amp;lt;/StudentFragment&amp;gt;&lt;/code>. В середині нього я відображаю &lt;code>&amp;lt;h3&amp;gt;Students&amp;lt;/h3&amp;gt;&lt;/code> для кожної школи якщо &lt;code>s.Students.Count&lt;/code> більше 0. І далі йду циклом по студентах і відображаю компонент &lt;code>&amp;lt;StudentComponent StudentInfo=&amp;quot;@stu&amp;quot;&amp;gt;&amp;lt;/StudentComponent&amp;gt;&lt;/code> для кожного студента.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/kJ2Jn3v.png" alt="Students">&lt;/p></content></item><item><title>Create Page in Blazor</title><link>/ua/2020/10/12/create-page-in-blazor/</link><pubDate>Mon, 12 Oct 2020 11:57:31 +0300</pubDate><guid>/ua/2020/10/12/create-page-in-blazor/</guid><description>Привіт!
Сьогодні розглянемо як можна створити нову сторінку в BlazorServer та добавити її в меню.
Add new page Для цього натисність правою кнопкою миші на папці Pages і виберіть Razor Component...
Зявиться наступне вікно в якому потрібно обрати назву та натиснути Add
Сторінка буде створена з наступним контентом:
&amp;lt;h3&amp;gt;Test1&amp;lt;/h3&amp;gt; @code { } Для того щоб її можна було відкрити в браузері на початку файла потрібно добавити @page &amp;quot;/test1&amp;quot; де test1 це назва ендпоінта.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні розглянемо як можна створити нову сторінку в BlazorServer та добавити її в меню.&lt;/p>
&lt;h2 id="add-new-page">Add new page&lt;/h2>
&lt;p>Для цього натисність правою кнопкою миші на папці &lt;code>Pages&lt;/code> і виберіть &lt;code>Razor Component...&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/LAORGw0.png" alt="RazorPages">&lt;/p>
&lt;p>Зявиться наступне вікно в якому потрібно обрати назву та натиснути &lt;code>Add&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KpWZQZl.png" alt="AddPage">&lt;/p>
&lt;p>Сторінка буде створена з наступним контентом:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;h3&amp;gt;Test1&amp;lt;/h3&amp;gt;
@code {
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для того щоб її можна було відкрити в браузері на початку файла потрібно добавити &lt;code>@page &amp;quot;/test1&amp;quot;&lt;/code> де &lt;code>test1&lt;/code> це назва ендпоінта. І тепер якщо запустити аплікацію та в браузері ввести &lt;code>localhost:5001/test1&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/5SioB5m.png" alt="TestPage1">&lt;/p>
&lt;p>Але наша сторінка не відображається в меню. Давайте тепер її добавимо.&lt;/p>
&lt;h2 id="add-page-in-menu">Add page in menu&lt;/h2>
&lt;p>За меню відбовідай файл &lt;code>Shared/NavMenu.razor&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/y5KI2Pw.png" alt="Menu">&lt;/p>
&lt;p>Файл має наступний контент&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;top-row pl-4 navbar navbar-dark&amp;#34;&lt;/span>&amp;gt;
&amp;lt;a class=&lt;span style="color:#e6db74">&amp;#34;navbar-brand&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt;BlazorLearn&amp;lt;/a&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler-icon&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;@NavMenuCssClass&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;ul class=&lt;span style="color:#e6db74">&amp;#34;nav flex-column&amp;#34;&lt;/span>&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> Match=&lt;span style="color:#e6db74">&amp;#34;NavLinkMatch.All&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-home&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Home
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;counter&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-plus&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Counter
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;fetchdata&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-list-rich&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Fetch data
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> collapseNavMenu = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> NavMenuCssClass =&amp;gt; collapseNavMenu ? &lt;span style="color:#e6db74">&amp;#34;collapse&amp;#34;&lt;/span> : &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ToggleNavMenu()
{
collapseNavMenu = !collapseNavMenu;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Що нам потрібно це добавити ще один елемент в &lt;code>@NavMenuCssClass&lt;/code>, саме цей div відповідає за відображення елементів меню. Я добавлю наступний елемент&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;test1&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-aperture&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Test1
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>href&lt;/code> - це ендпоінт сторінки
&lt;code>&amp;lt;span class=&amp;quot;oi oi-aperture&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code> - добавляє іконку до елемента меню&lt;/p>
&lt;p>Запущу аплікації і отримаю результат&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/Jg9lW7t.png" alt="Test1Menu">&lt;/p>
&lt;h2 id="folder-structure">Folder structure&lt;/h2>
&lt;p>Сторінки можна організувати по папках. Для прикладу я створю папку &lt;code>Demo&lt;/code> в середині &lt;code>Pages&lt;/code> і переміще сторінку &lt;code>Test1.razor&lt;/code> в неї.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/3BZHInw.png" alt="DemoFolder">&lt;/p>
&lt;p>Запустивши аплікацію сторінка всерівно буде працювати. Але при такій структурі логінчніше було б це відобразити в ендопінті. Для цього в &lt;code>Test1.razor&lt;/code> є поміняю ендпоінт з &lt;code>@page &amp;quot;/test1&amp;quot;&lt;/code> на &lt;code>@page &amp;quot;/demo/test1&amp;quot;&lt;/code>. Також відповідну зміну потрібно зробити в меню &lt;code>NavMenu.razor&lt;/code> з &lt;code>href=&amp;quot;test1&amp;quot;&lt;/code> на &lt;code>href=&amp;quot;demo/test1&amp;quot;&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/NtlshHK.png" alt="DemoPage">&lt;/p></content></item><item><title>Blazor Server Logging</title><link>/ua/2020/10/10/blazor-server-logging/</link><pubDate>Sat, 10 Oct 2020 19:01:49 +0300</pubDate><guid>/ua/2020/10/10/blazor-server-logging/</guid><description>Привіт!
Сьогодні подивимось як налаштовувати логування в BlazorServer.
Одразу після створення проекту в корені проекту буде файл appsettings.json.
{ &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; } }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34; } Саме тут вкзаано налаштування логування. LogLevel починається з Default який має значення Information. Це означає що по замовчуванні лог левел буде Information. Далі йде Microsoft з рівнем Warning, відповідно для namespace Microsoft рівень логування буде Warning. І в самому кінці Microsoft.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні подивимось як налаштовувати логування в BlazorServer.&lt;br>
Одразу після створення проекту в корені проекту буде файл &lt;code>appsettings.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;Default&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;Microsoft&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Warning&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>
}
},
&lt;span style="color:#f92672">&amp;#34;AllowedHosts&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Саме тут вкзаано налаштування логування. &lt;code>LogLevel&lt;/code> починається з &lt;code>Default&lt;/code> який має значення &lt;code>Information&lt;/code>. Це означає що по замовчуванні лог левел буде &lt;code>Information&lt;/code>. Далі йде &lt;code>Microsoft&lt;/code> з рівнем &lt;code>Warning&lt;/code>, відповідно для namespace &lt;code>Microsoft&lt;/code> рівень логування буде &lt;code>Warning&lt;/code>. І в самому кінці &lt;code>Microsoft.Hosting.Lifetime&lt;/code> має значення &lt;code>Information&lt;/code>. Це означає що для всього namespace &lt;code>Microsoft&lt;/code> окрім частини &lt;code>Microsoft.Hosting.Lifetime&lt;/code> буде значення &lt;code>Warning&lt;/code>.&lt;/p>
&lt;p>Якщо змінити налаштування логування в цьому файлі і запустити аплікації нічого не зміниться. А все тому що в &lt;code>launchSettings.json&lt;/code> вказано &lt;code>&amp;quot;ASPNETCORE_ENVIRONMENT&amp;quot;: &amp;quot;Development&amp;quot;&lt;/code>. І для development середовища використовується інший файл &lt;code>appsettings.Development.json&lt;/code>. Знайти його можна якщо натиснути на стрілку біля &lt;code>appsettings.json&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ecvHX8b.png" alt="DevJson">&lt;/p>
&lt;p>Я поміняю всі рівні на &lt;code>Debug&lt;/code> в &lt;code>appsettings.Development.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">{
&lt;span style="color:#e6db74">&amp;#34;DetailedErrors&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;span style="color:#e6db74">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
&lt;span style="color:#e6db74">&amp;#34;Default&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Debug&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Microsoft&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Debug&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Debug&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Після цього запущу аплікацію. І побачу багато логів в консолі.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zSiopdQ.png" alt="Debug">&lt;br>
Якщо мені потрібно з усіх логів включити тільки якийсь конкретний я теж можу це зробити.
Наприклад мені потрібно бачити логи з &lt;code>Microsoft.AspNetCore.Components.RenderTree.Renderer&lt;/code> в &lt;code>Debug&lt;/code> а всі інші в інфо. Для цього я добавлю його в &lt;code>appsettings.Development.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">{
&lt;span style="color:#e6db74">&amp;#34;DetailedErrors&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Logging&amp;#34;&lt;/span>: {
&lt;span style="color:#e6db74">&amp;#34;LogLevel&amp;#34;&lt;/span>: {
&lt;span style="color:#e6db74">&amp;#34;Default&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Microsoft&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Warning&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Microsoft.Hosting.Lifetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Information&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;Microsoft.AspNetCore.Components.RenderTree.Renderer&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Debug&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Після цього логи будуть виглядати ось так
&lt;img src="https://i.imgur.com/VSvNmol.png" alt="Debug2">&lt;/p>
&lt;h2 id="logging-from-razor-pages">Logging from razor pages&lt;/h2>
&lt;p>Спробуєм відправити лог повідомлення з razor pages. Наприклад візьмемо сторінку &lt;code>Counter.razor&lt;/code>.&lt;br>
Для використання логера спочатку потрібно імпортувати потрібний неймспейс &lt;code>@using Microsoft.Extensions.Logging&lt;/code>. І за допомогою DI, ввести логер в сторінку &lt;code>@inject ILogger&amp;lt;Counter&amp;gt; Logger&lt;/code>. Тепер логер можна використувати в сторінці.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/counter&amp;#34;&lt;/span>
@using Microsoft.Extensions.Logging
@inject ILogger&amp;lt;Counter&amp;gt; Logger
&amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;IncrementCount&amp;#34;&lt;/span>&amp;gt;Click me&amp;lt;/button&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> currentCount = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> IncrementCount()
{
currentCount++;
Logger.LogInformation(&lt;span style="color:#e6db74">&amp;#34;Button clicked, current count #{count}&amp;#34;&lt;/span>, currentCount);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Кожен раз як я натискаю кнопку Click me. Повідомлення з&amp;rsquo;являється в консолі.
&lt;img src="https://i.imgur.com/85IThm0.png" alt="Clicked">&lt;/p>
&lt;h2 id="logging-from-class">Logging from class&lt;/h2>
&lt;p>Аналогічно лог повідомлення можна відправляти з класів за допомогою DI. Спочатку створюється обєкт &lt;code>private readonly ILogger&amp;lt;WeatherForecastService&amp;gt; _logger;&lt;/code> і за допомогою конструктора передаємо наш логер.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.Extensions.Logging;
&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Data
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherForecastService&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> ILogger&amp;lt;WeatherForecastService&amp;gt; &lt;span style="color:#ae81ff">_l&lt;/span>ogger;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[] Summaries = &lt;span style="color:#66d9ef">new&lt;/span>[]
{
&lt;span style="color:#e6db74">&amp;#34;Freezing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bracing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Chilly&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Cool&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Mild&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Warm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Balmy&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hot&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sweltering&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Scorching&amp;#34;&lt;/span>
};
&lt;span style="color:#66d9ef">public&lt;/span> WeatherForecastService(ILogger&amp;lt;WeatherForecastService&amp;gt; logger)
{
&lt;span style="color:#ae81ff">_l&lt;/span>ogger = logger;
}
&lt;span style="color:#66d9ef">public&lt;/span> Task&amp;lt;WeatherForecast[]&amp;gt; GetForecastAsync(DateTime startDate)
{
&lt;span style="color:#ae81ff">_l&lt;/span>ogger.LogInformation(&lt;span style="color:#e6db74">&amp;#34;WeatherForecastService called&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">var&lt;/span> rng = &lt;span style="color:#66d9ef">new&lt;/span> Random();
&lt;span style="color:#66d9ef">return&lt;/span> Task.FromResult(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>).Select(index =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> WeatherForecast
{
Date = startDate.AddDays(index),
TemperatureC = rng.Next(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>),
Summary = Summaries[rng.Next(Summaries.Length)]
}).ToArray());
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/x2iCOZw.png" alt="Class">&lt;/p>
&lt;h2 id="logger-configuration-from-code">Logger configuration from code&lt;/h2>
&lt;p>Якщо потрібно то логер можна конфігурвати з коду а не з &lt;code>application.json&lt;/code>. Це можна зробити в &lt;code>Program.cs&lt;/code> в методі &lt;code>CreateHostBuilder&lt;/code>. По замовчуванні він має такий вигляд.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IHostBuilder CreateHostBuilder(&lt;span style="color:#66d9ef">string&lt;/span>[] args) =&amp;gt;
Host.CreateDefaultBuilder(args)
.ConfigureWebHostDefaults(webBuilder =&amp;gt;
{
webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для того щоб налаштувати логер до &lt;code>CreateDefaultBuilder&lt;/code> потрібно добавити &lt;code>ConfigureLogging&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> IHostBuilder CreateHostBuilder(&lt;span style="color:#66d9ef">string&lt;/span>[] args) =&amp;gt;
Host.CreateDefaultBuilder(args)
.ConfigureLogging(logger =&amp;gt;
{
logger.ClearProviders();
logger.SetMinimumLevel(LogLevel.Information);
logger.AddConsole();
})
.ConfigureWebHostDefaults(webBuilder =&amp;gt;
{
webBuilder.UseStartup&amp;lt;Startup&amp;gt;();
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>logger.ClearProviders()&lt;/code> очищає всі попередні налаштування. І після нього одразу можна добавлятий інший log provider, наприклад Seriolog чи будь який інший.
&lt;code>logger.SetMinimumLevel(LogLevel.Information)&lt;/code> - вказує мінімальний лог левел.
&lt;code>logger.AddConsole()&lt;/code> - добавляє вивід логів в консоль.&lt;/p></content></item><item><title>Blazor Dependency Injection</title><link>/ua/2020/10/07/blazor-server-dependency-injection/</link><pubDate>Wed, 07 Oct 2020 21:15:25 +0300</pubDate><guid>/ua/2020/10/07/blazor-server-dependency-injection/</guid><description>Привіт!
Сьогодні поговоримо як працює dependency injection в blazor server. Якщо ви знайому з dependency injection в asp.net core то відміностей тут немає. Dependency injection налаштовуєтся в Startup.cs в корені проекта. Одразу після створення проекту це матиме ось такий вигляд
public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;(); } Розберемо що тут відбуваться.
services.AddRazorPages() - добавляє підтримку razor pages в проект
services.AddServerSideBlazor() - добавляє підтримку blazor server в проект
services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;() - реєструє клас WeatherForecastService в DI.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні поговоримо як працює dependency injection в blazor server.
Якщо ви знайому з dependency injection в asp.net core то відміностей тут немає.
Dependency injection налаштовуєтся в &lt;code>Startup.cs&lt;/code> в корені проекта. Одразу після створення проекту це матиме ось такий вигляд&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ConfigureServices(IServiceCollection services)
{
services.AddRazorPages();
services.AddServerSideBlazor();
services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Розберемо що тут відбуваться.&lt;br>
&lt;code>services.AddRazorPages()&lt;/code> - добавляє підтримку razor pages в проект&lt;br>
&lt;code>services.AddServerSideBlazor()&lt;/code> - добавляє підтримку blazor server в проект&lt;br>
&lt;code>services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;()&lt;/code> - реєструє клас &lt;code>WeatherForecastService&lt;/code> в DI.&lt;/p>
&lt;p>&lt;code>WeatherForecastService&lt;/code> в прикладі добавлється як &lt;code>Singleton&lt;/code>. Може бути ще &lt;code>Scoped&lt;/code> i &lt;code>Transient&lt;/code>. Детальніше на них подивимось далі.&lt;/p>
&lt;p>Спробуєм добавити новий клас в DI і перевірити як він працює з різними типами (Singleton, Scoped, Transient).&lt;/p>
&lt;p>Для цього в папці &lt;code>Data&lt;/code> я створю файл який буде генерувати випадкове число.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Data
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RandomData&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> randomData;
&lt;span style="color:#66d9ef">public&lt;/span> RandomData()
{
Random random = &lt;span style="color:#66d9ef">new&lt;/span> Random();
randomData = random.Next();
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> GetRandomData()
{
&lt;span style="color:#66d9ef">return&lt;/span> randomData;
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В класі &lt;code>RandomData&lt;/code> в конструкторі генерується випадкове число. А метод &lt;code>GetRandomData&lt;/code> вертає його. Для того щоб використати клас в DI потрібно створити інтерфейс. Можна користуватись і без інтерфейса. Aле завдяки інтерфейсу легко можна замінити в реалізації цей клас на інший. Так буде виглядати інтерфейс.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Data
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> IRandomData
{
&lt;span style="color:#66d9ef">int&lt;/span> GetRandomData();
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="singleton">Singleton&lt;/h2>
&lt;p>Тепер клас можна зареєструвати в DI. Поченемо з Singleton. Для цього в &lt;code>Startup.cs&lt;/code> файлі в методі &lt;code>ConfigureServices&lt;/code> потрібно добавити:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">services.AddSingleton&amp;lt;IRandomData, RandomData&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер кожен раз як хтось буде використовувати інтерфейс &lt;code>IRandomData&lt;/code> буде підставлено &lt;code>RandomData&lt;/code>.
Тепер в &lt;code>index.razor&lt;/code> я викличу &lt;code>GetRandomNumber&lt;/code> метод.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
@using BlazorLearn.Data
@inject IRandomData RandomData
&amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
Welcome to your &lt;span style="color:#66d9ef">new&lt;/span> app.
Your random number &lt;span style="color:#66d9ef">is&lt;/span> @RandomData.GetRandomData()
&amp;lt;SurveyPrompt Title=&lt;span style="color:#e6db74">&amp;#34;How is Blazor working for you?&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@inject IRandomData RandomData&lt;/code> виликає конструктор нашого класу. І запустимо аплікацію.&lt;br>
&lt;img src="https://i.imgur.com/rentHkC.gif" alt="Singletone">&lt;/p>
&lt;p>Якщо я відкрию аплікацію в іншому браузері випадкове число залишиться таким самим. Саме так працює singleton. Об&amp;rsquo;єкт створюється один раз при старті аплікації.&lt;/p>
&lt;h2 id="scoped">Scoped&lt;/h2>
&lt;p>Прдивимось тепер як працює scoped. Замінимо &lt;code>AddSingleton&lt;/code> на &lt;code>AddScoped&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">services.AddScoped&amp;lt;IRandomData, RandomData&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>І запустимо аплцікацїю. Тепер якщо я перейду на іншу сторінку сайту а потім повернусь назад число залишиться таким самим. А от якщо я оновлю сторінку то число поміняться. Scoped обєкти створюються один раз на кожен запит.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/kYOcBXY.gif" alt="Scoped">&lt;/p>
&lt;h2 id="transient">Transient&lt;/h2>
&lt;p>І останій тип це &lt;code>Transient&lt;/code>. Тепер замінимо &lt;code>AddScoped&lt;/code> на &lt;code>AddTransient&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">services.AddTransient&amp;lt;IRandomData, RandomData&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Запустимо аплікацію. І тепер навіть якщо перейти з однієї вкладки на іншу число змінюється кожен раз.&lt;br>
&lt;img src="https://i.imgur.com/ipleQaj.gif" alt="Transient">&lt;/p>
&lt;h2 id="di-in-class">DI in Class&lt;/h2>
&lt;p>І на кінець подивимось як можна використати &lt;code>RandomData&lt;/code> клас в іншому класі за допомогою DI.&lt;br>
Для прикладу візьмемо &lt;code>Data/WeatherForecastService.cs&lt;/code>. В цьому класі потрібно зробити зміну типу &lt;code>IRandomData&lt;/code> і ініціалізувати її в конструкторі. І тепер її можна використовувати в будь якому місці цього класу.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;span style="color:#66d9ef">using&lt;/span> System.Linq;
&lt;span style="color:#66d9ef">using&lt;/span> System.Threading.Tasks;
&lt;span style="color:#66d9ef">namespace&lt;/span> BlazorLearn.Data
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WeatherForecastService&lt;/span>
{
&lt;span style="color:#66d9ef">private&lt;/span> IRandomData &lt;span style="color:#ae81ff">_&lt;/span>randomData;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>[] Summaries = &lt;span style="color:#66d9ef">new&lt;/span>[]
{
&lt;span style="color:#e6db74">&amp;#34;Freezing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bracing&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Chilly&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Cool&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Mild&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Warm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Balmy&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hot&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sweltering&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Scorching&amp;#34;&lt;/span>
};
&lt;span style="color:#66d9ef">public&lt;/span> WeatherForecastService(IRandomData randomData)
{
&lt;span style="color:#ae81ff">_&lt;/span>randomData = randomData;
}
&lt;span style="color:#66d9ef">public&lt;/span> Task&amp;lt;WeatherForecast[]&amp;gt; GetForecastAsync(DateTime startDate)
{
&lt;span style="color:#66d9ef">var&lt;/span> rng = &lt;span style="color:#66d9ef">new&lt;/span> Random();
&lt;span style="color:#66d9ef">return&lt;/span> Task.FromResult(Enumerable.Range(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>).Select(index =&amp;gt; &lt;span style="color:#66d9ef">new&lt;/span> WeatherForecast
{
Date = startDate.AddDays(index),
TemperatureC = &lt;span style="color:#ae81ff">_&lt;/span>randomData.GetRandomData(),
Summary = Summaries[rng.Next(Summaries.Length)]
}).ToArray());
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>_randomData.GetRandomData()&lt;/code> я запишу в зміну &lt;code>TemperatureC&lt;/code> і запущу аплікацію. На сторінці &lt;code>FetchData&lt;/code> буде тепература зегенерована за допомогою &lt;code>GetRandomData&lt;/code>.&lt;br>
&lt;img src="https://i.imgur.com/1Z4KBZm.png" alt="RandomData">&lt;/p>
&lt;p>Важливо щоб в DI &lt;code>WeatherForecastService&lt;/code> та &lt;code>RandomData&lt;/code> були одинаково добавлені.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> services.AddScoped&amp;lt;WeatherForecastService&amp;gt;();
services.AddScoped&amp;lt;IRandomData, RandomData&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Blazor Server Error Handling</title><link>/ua/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/ua/2020/10/06/blazor-server-error-handling/</guid><description>Привіт!
Сьогодні подивимось як можна поміняти еррор меседжі в Blazor Server. Є два типи помилок неіснуює сторінка або ексепшин. Можна міняти повідомлення яке буде відображатись в двох випадках. Першим розглянемо як поміняти повідомлення яке відображається користувача у випадку ексепшина.
Exception Error В файлі Pages/_Host.cshtml даний участок відповідає за відображення помилки:
&amp;lt;div id=&amp;#34;blazor-error-ui&amp;#34;&amp;gt; &amp;lt;environment include=&amp;#34;Staging,Production&amp;#34;&amp;gt; An error has occurred. This application may no longer respond until reloaded. &amp;lt;/environment&amp;gt; &amp;lt;environment include=&amp;#34;Development&amp;#34;&amp;gt; An unhandled exception has occurred.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні подивимось як можна поміняти еррор меседжі в Blazor Server. Є два типи помилок неіснуює сторінка або ексепшин. Можна міняти повідомлення яке буде відображатись в двох випадках.
Першим розглянемо як поміняти повідомлення яке відображається користувача у випадку ексепшина.&lt;/p>
&lt;h2 id="exception-error">Exception Error&lt;/h2>
&lt;p>В файлі &lt;code>Pages/_Host.cshtml&lt;/code> даний участок відповідає за відображення помилки:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &amp;lt;div id=&lt;span style="color:#e6db74">&amp;#34;blazor-error-ui&amp;#34;&lt;/span>&amp;gt;
&amp;lt;environment include=&lt;span style="color:#e6db74">&amp;#34;Staging,Production&amp;#34;&lt;/span>&amp;gt;
An error has occurred. This application may no longer respond until reloaded.
&amp;lt;/environment&amp;gt;
&amp;lt;environment include=&lt;span style="color:#e6db74">&amp;#34;Development&amp;#34;&lt;/span>&amp;gt;
An unhandled exception has occurred. See browser dev tools &lt;span style="color:#66d9ef">for&lt;/span> details.
&amp;lt;/environment&amp;gt;
&amp;lt;a href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> class=&lt;span style="color:#e6db74">&amp;#34;reload&amp;#34;&lt;/span>&amp;gt;Reload&amp;lt;/a&amp;gt;
&amp;lt;a class=&lt;span style="color:#e6db74">&amp;#34;dismiss&amp;#34;&lt;/span>&amp;gt;&lt;span style="color:#960050;background-color:#1e0010">🗙&lt;/span>&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В залежності від &lt;code>environment&lt;/code> потрібна помилка відображається. &lt;code>environment&lt;/code> визначається енваєрмент зміною &lt;code>ASPNETCORE_ENVIRONMENT&lt;/code> якщо вона не вказана то &lt;code>environment&lt;/code> відповідає &lt;code>Production&lt;/code>. Під часу девелопменту по дефолту в &lt;code>Properties\launchSettings.json&lt;/code> зазначено як &lt;code>Development&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;BlazorLearn&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;commandName&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Project&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;launchBrowser&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;applicationUrl&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://localhost:5001;http://localhost:5000&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;environmentVariables&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;ASPNETCORE_ENVIRONMENT&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Development&amp;#34;&lt;/span>
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер я поміняю повідомлення для Development середовища і отримаю повідомлення при помилці&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/7Z9XK94.png" alt="Error">&lt;/p>
&lt;h2 id="page-not-found-error">Page not found error&lt;/h2>
&lt;p>Повідомлення яке відображається коли сторінку не знайдено знаходиться в файлі &lt;code>App.razor&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &amp;lt;NotFound&amp;gt;
&amp;lt;LayoutView Layout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;p&amp;gt;Sorry, there&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s nothing at &lt;span style="color:#66d9ef">this&lt;/span> address.&amp;lt;/p&amp;gt;
&amp;lt;/LayoutView&amp;gt;
&amp;lt;/NotFound&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тут може бути як повідомлення так і ціла html сторінка. Замінивши текст повідомлення я отримую:&lt;br>
&lt;img src="https://i.imgur.com/XyheYSU.png" alt="NotExist">&lt;/p></content></item><item><title>Blazor Server Routing</title><link>/ua/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/ua/2020/10/01/blazor-server-routing/</guid><description>Привіт! Сьогодні я хочу розказати як працює роутінг в Blazor Server.
Роутінг починається в файлі Startup.cs. За це відбовідає наступний код
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); прийшов з asp.net і означає додати route matching в middleware pipeline. Цей middleware дивиться в набір ендпоінтів зазначених в аплікації і вибирає той який найбілше підходить базуючись на реквесті.
app.UseEndpoints() додає ендпоніт в middleware pipeline. Він запускає делегат якому відповідає ендпоінт.</description><content>&lt;p>Привіт!
Сьогодні я хочу розказати як працює роутінг в Blazor Server.&lt;br>
Роутінг починається в файлі &lt;code>Startup.cs&lt;/code>. За це відбовідає наступний код&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> app.UseRouting();
app.UseEndpoints(endpoints =&amp;gt;
{
endpoints.MapBlazorHub();
endpoints.MapFallbackToPage(&lt;span style="color:#e6db74">&amp;#34;/_Host&amp;#34;&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>app.UseRouting();&lt;/code> прийшов з asp.net і означає додати route matching в middleware pipeline. Цей middleware дивиться в набір ендпоінтів зазначених в аплікації і вибирає той який найбілше підходить базуючись на реквесті.&lt;br>
&lt;code>app.UseEndpoints()&lt;/code> додає ендпоніт в middleware pipeline. Він запускає делегат якому відповідає ендпоінт.&lt;br>
В середині &lt;code>app.UseEndpoints()&lt;/code> вказується &lt;code>endpoints.MapBlazorHub()&lt;/code> тут налаштовується SignalR підключення. Налаштування здійснюється автоматично і змінювати тут нічого не потрібно.&lt;br>
Наступний елемент це &lt;code>endpoints.MapFallbackToPage(&amp;quot;/_Host&amp;quot;)&lt;/code> є резервним маршрутом, в нього найнижчий пріорітет, викликається в тому випадку якщо інших більш підходящих маршрутів не знайдено. В параметрах до &lt;code>MapFallbackToPage&lt;/code> вказано &lt;code>/_Host&lt;/code>. Це файл до якого буде перенаправлено.&lt;br>
Цей файл знаходиться за шляхом &lt;code>Pages/_Host.cshtml&lt;/code>. Виглядає він схоже до звичайного html з деякими відміностями. На почтаку файла вказано&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
@namespace BlazorLearn.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>{
Layout = &lt;span style="color:#66d9ef">null&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@page &amp;quot;/&amp;quot;&lt;/code> означай що цей файл буде відкрито якщо в url буде звернення до &lt;code>/&lt;/code>&lt;/p>
&lt;p>В body відбувається рендер сторінок&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &amp;lt;app&amp;gt;
&amp;lt;component type=&lt;span style="color:#e6db74">&amp;#34;typeof(App)&amp;#34;&lt;/span> render-mode=&lt;span style="color:#e6db74">&amp;#34;ServerPrerendered&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/app&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тут вказано що ми рендеремо і в якому режимі. &lt;code>ServerPrerendered&lt;/code> рендерить спочатку на сервері і тоді відображає клієнту. &lt;code>App&lt;/code> вказує ще на одинй файл &lt;code>App.razor&lt;/code>. Цей файл визначає який layout відображати.
Якщо &lt;code>routeData&lt;/code> існує відобразити її, якщо ця сторінка не має layout то &lt;code>MainLayout&lt;/code> буде використано. Якщо ж routeData не існує то буде відображено &lt;code>MainLayout&lt;/code> і текст &lt;code>Sorry, there's nothing at this address.&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;Router AppAssembly=&lt;span style="color:#e6db74">&amp;#34;@typeof(Program).Assembly&amp;#34;&lt;/span>&amp;gt;
&amp;lt;Found Context=&lt;span style="color:#e6db74">&amp;#34;routeData&amp;#34;&lt;/span>&amp;gt;
&amp;lt;RouteView RouteData=&lt;span style="color:#e6db74">&amp;#34;@routeData&amp;#34;&lt;/span> DefaultLayout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/Found&amp;gt;
&amp;lt;NotFound&amp;gt;
&amp;lt;LayoutView Layout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;p&amp;gt;Sorry, there&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s nothing at &lt;span style="color:#66d9ef">this&lt;/span> address.&amp;lt;/p&amp;gt;
&amp;lt;/LayoutView&amp;gt;
&amp;lt;/NotFound&amp;gt;
&amp;lt;/Router&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В blazor server проекті одразу є створенні декілька сторінок. Це Counter, FetchData i Index. В кожній з них на початку вказано &lt;code>@page&lt;/code>. Для counter це буде &lt;code>@page &amp;quot;/counter&amp;quot;&lt;/code> для FetchData це буде &lt;code>@page &amp;quot;/fetchdata&amp;quot;&lt;/code> і для Index &lt;code>@page &amp;quot;/&amp;quot;&lt;/code>. Отже якщо відкрити в браузері будь який з цих ендпоінтів відповідна сторінка буде відкрита.&lt;br>
Для одінєї сторінки може бути вказано декілька значень &lt;code>@page&lt;/code>. Наприклад для Counter можна добавити&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/counter&amp;#34;&lt;/span>
@page &lt;span style="color:#e6db74">&amp;#34;/count&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>І тепер Counter сторінка буде відкриватись для обох url.&lt;br>
&lt;img src="https://i.imgur.com/J4m8Off.png" alt="Count">&lt;/p>
&lt;p>Для Counter також можна передавати початкове зазначення. Зараз при відкриті сторінки воно завжди рівне нулю.
Для цього потрібно добавити ще один &lt;code>@page&lt;/code> який буде виглядати &lt;code>@page &amp;quot;/counter/{InitialValue:int}&amp;quot;&lt;/code> також можна добавити такий самий для count. &lt;code>InitialValue&lt;/code> буде публічний параметр типу int. Це дасть з могу в url вказувати &lt;code>localhost:5001/counter/123&lt;/code>. Далі потрібно написати код який буде встановалювати це значення. В &lt;code>@code&lt;/code> секції потрібно добавити параметер з такою самою назвою &lt;code>public int InitialValue {get; set; }&lt;/code> цей параметр має мати атрибут &lt;code>[Parameter]&lt;/code>. Для того щоб передати значення &lt;code>InitialValue&lt;/code> потрібно викликати метод &lt;code>OnParametersSet&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/counter&amp;#34;&lt;/span>
@page &lt;span style="color:#e6db74">&amp;#34;/count&amp;#34;&lt;/span>
@page &lt;span style="color:#e6db74">&amp;#34;/counter/{InitialValue:int}&amp;#34;&lt;/span>
@page &lt;span style="color:#e6db74">&amp;#34;/count/{InitialValue:int}&amp;#34;&lt;/span>
&amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;btn btn-primary&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;IncrementCount&amp;#34;&lt;/span>&amp;gt;Click me&amp;lt;/button&amp;gt;
@code {
&lt;span style="color:#a6e22e"> [Parameter]&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> InitialValue {&lt;span style="color:#66d9ef">get&lt;/span>; &lt;span style="color:#66d9ef">set&lt;/span>; }
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> currentCount = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> OnParametersSet()
{
&lt;span style="color:#66d9ef">base&lt;/span>.OnParametersSet();
currentCount = InitialValue;
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> IncrementCount()
{
currentCount++;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>І результат буде такий
&lt;img src="https://i.imgur.com/n5MrYWK.png" alt="Result">&lt;/p>
&lt;p>Цей пост створено на основі курсу від Tim Corey - &lt;a href="https://iamtimcorey.com/p/blazor-server-in-depth">Blazor Server: In Depth&lt;/a>&lt;/p></content></item></channel></rss>