<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Maksym Postument</title><link>/ua/categories/ci/cd/</link><description>Recent content in CI/CD on Maksym Postument</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/ua/categories/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Dns for Github Pages</title><link>/ua/2020/11/02/custom-dns-for-github-pages/</link><pubDate>Mon, 02 Nov 2020 16:19:52 +0200</pubDate><guid>/ua/2020/11/02/custom-dns-for-github-pages/</guid><description>Привіт!
Сьогодні хочу показати як для GithubPages сайту можна добавити кастомне доменне ім&amp;rsquo;я.
Для цього потрібно виконати декілька кроків. Розпочнемо з реєстрації доменного імені. Для реєстрації яя вибрав Namecheap.
Перейшовши на Namecheap в пошуку потрібно ввести доменне ім&amp;rsquo;я яке хочу купити і знайшовиши додати його в корзину.
Біля мого доменного імені написано Taken це тому що я вже його купив.
Після того як доменне ім&amp;rsquo;я куплено потрібно перейти в свій профіль та натиснути Manage.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні хочу показати як для GithubPages сайту можна добавити кастомне доменне ім&amp;rsquo;я.&lt;br>
Для цього потрібно виконати декілька кроків. Розпочнемо з реєстрації доменного імені. Для реєстрації яя вибрав &lt;a href="https://www.namecheap.com/">Namecheap&lt;/a>.&lt;br>
Перейшовши на Namecheap в пошуку потрібно ввести доменне ім&amp;rsquo;я яке хочу купити і знайшовиши додати його в корзину.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/J1e9EI6.png" alt="Namecheap">&lt;/p>
&lt;p>Біля мого доменного імені написано &lt;code>Taken&lt;/code> це тому що я вже його купив.&lt;/p>
&lt;p>Після того як доменне ім&amp;rsquo;я куплено потрібно перейти в свій профіль та натиснути &lt;code>Manage&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nUFrMWl.png" alt="NamecheapDns">&lt;/p>
&lt;p>В секції &lt;code>Advanced DNS&lt;/code> я добавлю декілька записів зігдно Github документації. Актуальні адреса також можна знайти в &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">документації&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AeXmmxb.png" alt="Dns">&lt;/p>
&lt;p>Список A рекордів які потрібно створити:&lt;/p>
&lt;ul>
&lt;li>185.199.108.153&lt;/li>
&lt;li>185.199.109.153&lt;/li>
&lt;li>185.199.110.153&lt;/li>
&lt;li>185.199.111.153&lt;/li>
&lt;/ul>
&lt;p>Також потрібно створити CNAME який буде вказувати на GitHub Pages url. В моєму випадку це &lt;code>mpostument.github.io&lt;/code>.&lt;/p>
&lt;p>Наступним кроком потрібно добавити файл з іменем CNAME в корінь GitHub Pages репозиторія. В першому рядку цього файла потрібно написати нове доменне ім&amp;rsquo;я, для мене це &lt;code>mpostument.com&lt;/code>. Я використовую статичний сайт генератор Hugo з Github Actions. (Прочитати про це можна в моєму попередньому &lt;a href="https://mpostument.com/2020/10/21/deploy-hugo-with-github-actions-and-pages/">пості&lt;/a>). Для того щоб CNAME потрапив в корінь після деплою його потрібно покласти в папку static.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6zaK6Q1.png" alt="CNAME">&lt;/p>
&lt;p>Останім кроком я вкажу нове доменне ім&amp;rsquo;я в налаштуваннях GitHub Pages репозитрія. Для цього відкрити репозиторій та натиснути &lt;code>Settings&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yXAnZ0q.png" alt="Settings">&lt;/p>
&lt;p>Там знайти секцію яка відповідає за GitHub Pages. В полі Custom domain вказати своє значення та натиснути Save. Опція Enforce HTTPS стане доступною протягом 24 годин, рекомендую її також включити.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PE502gk.png" alt="PagesSetting">&lt;/p>
&lt;p>І тепер перейшовши на &lt;code>mpostument.github.io&lt;/code> я буду одразу перенаправлений на &lt;code>mpostument.com&lt;/code>&lt;/p></content></item><item><title>Deploy Hugo With Github Actions and Pages</title><link>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</link><pubDate>Wed, 21 Oct 2020 20:19:26 +0300</pubDate><guid>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</guid><description>Привіт!
Хочу показати як можна деплоїти hugo вебсайт в GitHub Pages за допомогою github actions. Саме так я деплою свій сайт.
Install Hugo Hugo можна скачати з GitHub. І покласти binary в файл в потрібну локацію.
GitHub setup В github потрібно створити два репозиторія, один в якому будуть зберігатись .md файли та тема (content-mpostument в моєму випадку) в інший буде використовуватись для GitHub Pages, в який буде деплоїтись сайт згенерований hugo (mpostument.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Хочу показати як можна деплоїти hugo вебсайт в GitHub Pages за допомогою github actions. Саме так я деплою свій сайт.&lt;/p>
&lt;h2 id="install-hugo">Install Hugo&lt;/h2>
&lt;p>Hugo можна скачати з &lt;a href="https://github.com/gohugoio/hugo/releases">GitHub&lt;/a>. І покласти binary в файл в потрібну локацію.&lt;/p>
&lt;h2 id="github-setup">GitHub setup&lt;/h2>
&lt;p>В github потрібно створити два репозиторія, один в якому будуть зберігатись .md файли та тема (content-mpostument в моєму випадку) в інший буде використовуватись для GitHub Pages, в який буде деплоїтись сайт згенерований hugo (mpostument.github.io).&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/GnsuIEm.png" alt="Repository">&lt;/p>
&lt;p>В &lt;code>mpostument.github.io&lt;/code> код буде деплоїтись через github actions. Руками зміни сюди вноситись не будуть.&lt;/p>
&lt;p>За допомогою hugo створю новий сайт. Буде створена нова директорія &lt;code>hugodemo&lt;/code> в ній ініціалізую git репозиторій та добавлю remote на &lt;code>content-mpostument&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new site hugodemo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd hugodemo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin git@github.com:mpostument/content-mpostument.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер потрібно вибрати тему для сайту. Теми можна подивитись на &lt;a href="https://themes.gohugo.io/">themes.gohugo&lt;/a>&lt;/p>
&lt;p>Для свого сайту я обрав тему &lt;a href="https://github.com/panr/hugo-theme-terminal/">Terminal&lt;/a>. Тему можна скачати архівом і розпакувати в папку &lt;code>themes&lt;/code> або добавити як submodule. Я добавлю як submodule для того щоб завжди мати останню версію теми.&lt;/p>
&lt;p>&lt;code>git submodule add https://github.com/panr/hugo-theme-terminal.git themes/terminal&lt;/code>.&lt;/p>
&lt;p>Зазвичай до кожної теми йде приклад конфігураційного файлу. Я скопіюю його з github сторінки і збережу в файлі &lt;code>config.toml&lt;/code>. Далі можна його підлаштовувати під свої потреби.&lt;/p>
&lt;p>Тепер можна запустити сайт і подивитись як він виглядатиме &lt;code>hugo serve -D&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yFdQHA5.png" alt="HugoExample">&lt;/p>
&lt;h2 id="github-actions">Github Actions&lt;/h2>
&lt;p>Для того щоб GitHub actions працював, в корені репозиторія потрібно створити папку &lt;code>.github/workflows&lt;/code> в якій створити yml файл з конфігурацією для Actions. В &lt;code>on&lt;/code> секції я вказую запускати білд тільки на push в master бренчу.&lt;/p>
&lt;p>В &lt;code>steps&lt;/code> я викликаю по черзі декілька actions. Починається pipeline з клонування репозиторія. Після цього я викликаю &lt;code>git submodule update --init --recursive&lt;/code> для того щоб оновити тему за допомогою submodule. Наступним кроком встановлюю потрібну версії hugo та викликаю &lt;code>hugo --minify&lt;/code> для того щоб згененрувати статичний сайт з .md файлів та теми. І останім кроком я деплою контент з &lt;code>./public&lt;/code> директорії. Вона з&amp;rsquo;являється після виконання команди &lt;code>hugo --minify&lt;/code>. Як параметри також потрібно передати ім&amp;rsquo;я git користувача, емейл, бренчу та репозиторій в яку здійснювати деплой.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Git checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2.3.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Update theme&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git submodule update --init --recursive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2.4.13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.76.5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3.7.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">personal_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GH_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">mpostument/mpostument.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user_name&lt;/span>: &lt;span style="color:#ae81ff">mpostument&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user_email&lt;/span>: &lt;span style="color:#ae81ff">777rip777@gmail.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер це можна закомітити в github репозиторій і при мерджі в мастер білд має запуститись.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1Vfl3A8.png" alt="ActionBuild">&lt;/p>
&lt;p>Як тільки білд пройшов нові файли мають одразу зявитись в Github Pages репозиторії &lt;code>mpostument.github.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/emHfquj.png" alt="DeployStatus">&lt;/p>
&lt;p>Через декілька хвилин вебсайт буде доступний за адресом &lt;code>mpostument.github.io&lt;/code>&lt;/p></content></item><item><title>Nightfall Dlp Configuration</title><link>/ua/2020/09/30/nightfall-dlp-configuration/</link><pubDate>Wed, 30 Sep 2020 21:52:21 +0300</pubDate><guid>/ua/2020/09/30/nightfall-dlp-configuration/</guid><description>Привіт!
Хочу сьогодні розказати про DLP Nightfall. Він дозволяє сканувати Pull Request на наявність на наявність персональної інформації, api ключів та інше.
Github Action Для Github Nightfall дає Action який можна використовувати для сканування Pull Request та Merge в бренчу. Для початку потрібно створити в корені репозиторія папку .github\workflows і в цій папці створити файл dlp.yml. Назва файлу можу бути будь якою.
name: nightfalldlp on: push: branches: - master pull_request: jobs: run-nightfalldlp: name: nightfalldlp runs-on: ubuntu-latest steps: - name: Checkout Repo Action uses: actions/checkout@v2 - name: nightfallDLP action step uses: nightfallai/nightfall_dlp_action@v0.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Хочу сьогодні розказати про DLP Nightfall. Він дозволяє сканувати Pull Request на наявність на наявність персональної інформації, api ключів та інше.&lt;/p>
&lt;h2 id="github-action">Github Action&lt;/h2>
&lt;p>Для Github Nightfall дає Action який можна використовувати для сканування Pull Request та Merge в бренчу.
Для початку потрібно створити в корені репозиторія папку .github\workflows і в цій папці створити файл dlp.yml. Назва файлу можу бути будь якою.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfalldlp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run-nightfalldlp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfalldlp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout Repo Action&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfallDLP action step&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">nightfallai/nightfall_dlp_action@v0.0.7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">NIGHTFALL_API_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.NIGHTFALL_API_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GITHUB_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">EVENT_BEFORE&lt;/span>: &lt;span style="color:#ae81ff">${{ github.event.before }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>В секції on вказано що сканування запускати на push в master бренчу та на Pull Request.&lt;br>
Action має два кроки, перший це клонувати репозиторій другий це запустити сканер.&lt;br>
Для роботи сканера необхідно декілька env зміних. GITHUB_TOKEN використовується для того щоб сканер міг добавляти коментарі в PR значення його має бути &lt;code>secrets.GITHUB_TOKEN&lt;/code>&lt;br>
&lt;img src="https://i.imgur.com/13N6AjR.png" alt="Comment">&lt;/p>
&lt;p>EVENT_BEFORE потрібен потрібне у випадку якщо сканер запускається на push event. І значення в нього має бути &lt;code>github.event.before&lt;/code>&lt;br>
NIGHTFALL_API_KEY остання потрібна зміна, отримати її можна зареєструвавшись на &lt;a href="https://nightfall.ai/api">nightfall.ai&lt;/a>. Після того NIGHTFALL_API_KEY отримано його потрібно добавити в GitHub Secrets&lt;br>
&lt;img src="https://i.imgur.com/8y5a2FH.png" alt="Secret">&lt;/p>
&lt;h2 id="nightfall-configuration">Nightfall Configuration&lt;/h2>
&lt;p>Після того я з GitHub Action закінчено потрібно створити конфігураційни файл для Nightfall.&lt;br>
Для цього створіть папку з назвою &lt;code>.nightfalldlp&lt;/code> і в ньому файл &lt;code>config.json&lt;/code>.&lt;br>
Список детекторів які підтримує nightfall.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;detectors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CREDIT_CARD_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PHONE_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;API_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CRYPTOGRAPHIC_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RANDOMLY_GENERATED_TOKEN&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_SOCIAL_SECURITY_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;AMERICAN_BANKERS_CUSIP_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_BANK_ROUTING_MICR&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ICD9_CODE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ICD10_CODE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_DRIVERS_LICENSE_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_PASSPORT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;EMAIL_ADDRESS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;IP_ADDRESS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Мій конфігураційни файл виглядає коротшим тому що з повним генерує велику кількість false positive алармів. Наприклад&lt;br>
&lt;img src="https://i.imgur.com/0EGejo0.png" alt="FalseErrorSample">&lt;/p>
&lt;p>Приклад мого файлу:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;detectors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;API_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CRYPTOGRAPHIC_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RANDOMLY_GENERATED_TOKEN&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;EMAIL_ADDRESS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;IP_ADDRESS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер це все потрібно закомітити сканер запуститься.&lt;br>
Навіть при такій конфігурації сканер видає багато false positive аларміві результат я отримую щоразу&lt;br>
&lt;img src="https://i.imgur.com/bJ1WWR2.png" alt="Error">
Наприклад отримую такий еррор
Suspicious content detected (3:&lt;em>&lt;strong>, type IP_ADDRESS) на &lt;code>&amp;quot;arn:aws:s3:::usershome/{{name}}-{{data}}/*&amp;quot;&lt;/code>&lt;br>
Або Suspicious content detected (ke&lt;/strong>&lt;/em>*****, type RANDOMLY_GENERATED_TOKEN) на&lt;br>
&lt;code>&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:kms:us-east-1:000000000:key/6a2b4d78-oy69-44ab-ce3d-43faca87fd14&amp;quot;&lt;/code>.&lt;br>
Незважаючи на частину false positive сканер дозволяє знайти закомічені паролі та api ключі&lt;/p></content></item><item><title>Deploy to ec2 with codedship</title><link>/ua/2020/09/16/deploy-to-ec2-with-codeship/</link><pubDate>Wed, 16 Sep 2020 20:24:40 +0300</pubDate><guid>/ua/2020/09/16/deploy-to-ec2-with-codeship/</guid><description>Привіт!
Сьогодні я хочу показати як можна задеплоїти код на AWS EC2 за допомогою CodeShip Basic. Для цього я використаю інтеграцію Codeship з AWS CodeDeploy.
CodeShip Configuration Спочатку потрібо добавити репозиторій в CodeShip і перейти в вкладу Deploy. І добавити branch з якої відбувається деплой на ec2. В моєму випадку branch master вже є добавлена. Після того як branch добавлено потрібно проскролити в низ до секції Deployment. І вибрати CodeDeploy Одразу зявиться наступна форма Тут потрібно ввести Access and Secret Keys користувача який буде здійснювати деплой.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні я хочу показати як можна задеплоїти код на AWS EC2 за допомогою CodeShip Basic.
Для цього я використаю інтеграцію Codeship з AWS CodeDeploy.&lt;/p>
&lt;h2 id="codeship-configuration">CodeShip Configuration&lt;/h2>
&lt;p>Спочатку потрібо добавити репозиторій в CodeShip і перейти в вкладу Deploy.
&lt;img src="https://i.imgur.com/Zz2v8aZ.png" alt="Coeship1">&lt;/p>
&lt;p>І добавити branch з якої відбувається деплой на ec2. В моєму випадку branch master вже є добавлена.
Після того як branch добавлено потрібно проскролити в низ до секції Deployment. І вибрати CodeDeploy
&lt;img src="https://i.imgur.com/KVCmUDn.png" alt="Codeship2">&lt;/p>
&lt;p>Одразу зявиться наступна форма
&lt;img src="https://i.imgur.com/rfdRxKl.png" alt="CodeshipForm3">
Тут потрібно ввести Access and Secret Keys користувача який буде здійснювати деплой. Користувач має мати доступ до s3 та CodeDeploy.
В регіон вказати ваш AWS Region де знаходится аплікація. Для мене це us-east-1.&lt;br>
&lt;code>Application&lt;/code>, &lt;code>GroupName&lt;/code> потрібно буде створити в AWS. Значення варто вибирати таке щоб було зрозуміло яка аплікаця деплоїться. &lt;code>S3 Bucket&lt;/code> може бути як загальний бакет куди будуть здійснювати усі деплойменти черех codeship або обрати індивідуальне ім&amp;rsquo;я для однієї аплікації. В моєму випадку це CodeShipEc2Deployment.&lt;br>
І останє це &lt;code>Config Name&lt;/code> потрібно вказати назву конфігурації в CodeDeploy. Я візьму стандартну &lt;code>CodeDeployDefault.AllAtOnce&lt;/code>. Це означає що деплой буде відбуватись одразу на всі ec2 інстанси&lt;/p>
&lt;p>Тепер з CodeShip закінчено і можна приступати до налаштування AWS.&lt;/p>
&lt;h2 id="codedeploy-configuration">CodeDeploy Configuration&lt;/h2>
&lt;p>Відкрите CodeDeploy сервіс в AWS.&lt;br>
&lt;img src="https://i.imgur.com/cTv6l3Y.png" alt="CodeDeploy">
В секції Deployment знайдіть Applications&lt;br>
&lt;img src="https://i.imgur.com/BAZ6E6d.png" alt="Applications">&lt;br>
Натисніть Create Application. Введіть назву таку ж як і в Codeship в секції &lt;code>Application&lt;/code>. Як Compute Platform оберіть EC2
&lt;img src="https://i.imgur.com/zAXUxuF.png" alt="CreateApplication">
Відкрийте тільки що створену &lt;code>Application&lt;/code> і в &lt;code>Deployment Groups&lt;/code> оберіть &lt;code>Create Deployment Group&lt;/code>&lt;br>
&lt;img src="https://i.imgur.com/5wfA0VU.png" alt="DeploymentGroup">
В &lt;code>Deployment group name&lt;/code> потрібно вкзати таку ж назву яка була вказана в CodeShip.
В &lt;code>ServiceRole&lt;/code> потрібно обрати роль яка дозволить здійснювати деплой на ec2. Хороший приклад ролі можна знайти &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html">тут&lt;/a>.&lt;/p>
&lt;p>В &lt;code>Environment configuration&lt;/code> оберіть ec2. Далі потрібно вказати який tag використовуватись для фільтра ec2. Наприклад це може буде Key=Name, Value=ProductionApplication. Тут можна використовувати будь які теги які є на вашому ec2 на який має здійснювати деплоймент.&lt;br>
&lt;img src="https://i.imgur.com/ffGKRQV.png" alt="Ec2Filter">&lt;/p>
&lt;h2 id="ec2-configuration">Ec2 Configuration&lt;/h2>
&lt;p>Для ec2 буде потрібна ще одна роль. Які доступи вона має мати можна знайти &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-ec2-configure.html#instances-ec2-configure-2-verify-instance-profile-permissions">тут&lt;/a>&lt;/p>
&lt;p>Після того як роль створена її потрібно заасайнити на ec2 інстанс. Для цього оберіть потрібний ec2. Натисніть правою кнопкою миші і виберіть Attach Role
&lt;img src="https://i.imgur.com/uaIUcyg.png" alt="AttachRole">
В спику знайдіть вище створену роль.&lt;br>
Тепер на ec2 інстанс потрібно поставити CodeDeploy Agent. Для цього підключіться до сервера по ssh
&lt;code>ssh -i private_key ec2-user@IP&lt;/code>. Далі буде приклад для AmazonLinux. Якщо в вас інша OS команди можна знайти &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-cli.html">тут&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Скачати інсталяцію &lt;code>wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install&lt;/code>&lt;/li>
&lt;li>Надати пермішини &lt;code>sudo chmod +x install&lt;/code>&lt;/li>
&lt;li>Встановити &lt;code>sudo ./install auto&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Перевірити чи агент запущено можна командою &lt;code>sudo service codedeploy-agent status&lt;/code>. Результат має бути орієнтовно такий &lt;code>The AWS CodeDeploy agent is running as PID 32466&lt;/code>.&lt;br>
Також потрібно створити папку в які буде знаходитись аплікація &lt;code>mkdir /opt/application&lt;/code> і дати пермішин для користувача. Я викоистовую ec2-user &lt;code>chown ec2-user:ec2-user /opt/application&lt;/code>&lt;/p>
&lt;h2 id="deployment-script">Deployment Script&lt;/h2>
&lt;p>В корені репозиторія потрібно створити файл який має називатись &lt;code>appspec.yml&lt;/code>. Тут можна знайти всі опції які підтримує цей файл - &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html">AWS&lt;/a>.&lt;/p>
&lt;p>Ось приклад мого файла:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">os&lt;/span>: &lt;span style="color:#ae81ff">linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">destination&lt;/span>: &lt;span style="color:#ae81ff">/opt/application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">permissions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">object&lt;/span>: &lt;span style="color:#ae81ff">/opt/application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AfterInstall&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">location&lt;/span>: &lt;span style="color:#ae81ff">ops/deploybuild.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runas&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>version&lt;/code> має стандартне значення і міняти його не потрібно. 0.0 Єдине значення як підтримується
&lt;code>os&lt;/code> може бути двох значення windows або linux, оскільки в мене OS на EC2 AmazonLinux я обираю linux
&lt;code>files&lt;/code> вказує які файли потрібно копіювати на сервер під час деплойменту. &lt;code>source: /&lt;/code> означає копіювати всі файли. &lt;code>destination&lt;/code> куди копіювати.&lt;br>
В &lt;code>permissions&lt;/code> зазначено які пермішини мають мати щойно скопійовані файли.&lt;br>
В &lt;code>hooks&lt;/code> секції відбувається конфігурація аплікації. Я використовую &lt;code>AfterInstall&lt;/code> hook. Це означає що скрипт буде запущено після &lt;code>Install&lt;/code> кроку. Під час &lt;code>Install&lt;/code> кроку файли копіюються на сервер. В &lt;code>location&lt;/code> вказано який скрипт запускати та від його корисувача. &lt;code>runas&lt;/code> означає що скрипт буде викликатись від імені користувача. По дефолту code-deploy agent запускається від рута і runas на цьому етапі переключить на ec2-user. Також можна поміняти щоб code-deploy agent запускався одарзу від ec2-user.&lt;/p>
&lt;p>Далі нам потрібен деплой скрипт. В репозиторії я створив папку ops оскільки шлях до мого скрипта &lt;code>- location: ops/deploybuild.sh&lt;/code>. І в цій папку створив скрипт &lt;code>deploybuild.sh&lt;/code>.
В мене node.js аплікації для якою потрібно зробити yarn install та npm start. Я це добавлю в скрипт&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>cd /opt/application
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn --ignore-engines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd examples/demo-app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>npm run start-prod&lt;span style="color:#f92672">)&lt;/span>&amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Це базовий скрипт як можна запустити node аплікацію. Для продакшина варто використовувати pm2 для старту js аплікацій.
Тепер залишилось зробити коміт в master branch і codedeploy запуститься автоматично&lt;/p></content></item><item><title>Build Dotnet Core With Travis</title><link>/ua/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/ua/2020/08/31/build-dotnet-core-with-travis/</guid><description>Привіт!
Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою Travis.
Для початку потрібно створити Travis акаунт. Для цього потрібно залогуватись вашим GitHub акаунтом. .travis.yml Конфігурація Наступним кроком потрібно створити .travis.yml файл в корені репозиторія. Приклад мого конфігураційного файлу:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою &lt;a href="https://travis-ci.com/">Travis&lt;/a>.&lt;br>
Для початку потрібно створити Travis акаунт. Для цього потрібно &lt;a href="https://travis-ci.com/signin">залогуватись&lt;/a> вашим GitHub акаунтом.
&lt;img src="https://i.imgur.com/L9lOBo8.png" alt="Login">&lt;/p>
&lt;h2 id="travisyml-конфігурація">.travis.yml Конфігурація&lt;/h2>
&lt;p>Наступним кроком потрібно створити .travis.yml файл в корені репозиторія.
Приклад мого конфігураційного файлу:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">csharp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">mono&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">dotnet&lt;/span>: &lt;span style="color:#ae81ff">3.1.4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">solution&lt;/span>: &lt;span style="color:#ae81ff">awstaghelper.sln&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">install&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet restore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x64 --output win-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x86 --output win-x86&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime linux-x64 --output linux-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime osx-x64 --output osx-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">before_deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 win-x64.zip win-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 win-x86.zip win-x86&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 linux-x64.zip linux-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 osx-x64.zip osx-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">releases&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">api_key&lt;/span>: &lt;span style="color:#ae81ff">$api_key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">win-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">win-x86.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">linux-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">osx-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">skip_cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="net-конфігурація">.Net конфігурація&lt;/h2>
&lt;p>Тепер розберемо конфіг.&lt;br>
Починається yml з оголошення мови програмування &lt;code>language: csharp&lt;/code>. &lt;code>mono&lt;/code> стоїть none тому що використовується .net core. І останнє це версія .net core. В моєму випадку це &lt;code>dotnet: 3.1.4&lt;/code>. Також потрібно вказати назву солюшину &lt;code>solution: awstaghelper.sln&lt;/code>.&lt;/p>
&lt;h2 id="build-конфігурація">Build Конфігурація&lt;/h2>
&lt;p>Далі йдуть білд кроки. Крок &lt;code>install&lt;/code> використовується для встановлення необхідних залежностей. &lt;code>dotnet restore&lt;/code> є не обов&amp;rsquo;язковим оскільки в останіх версіях dotnet &lt;code>restore&lt;/code> команда автоматично викликається при &lt;code>build&lt;/code>. Тому в данному випадку &lt;code>install&lt;/code> можна повністю видалити.&lt;/p>
&lt;p>В &lt;code>script&lt;/code> секції відбувається білд аплікації. Команду &lt;code>build&lt;/code> я викликаю 4 рази оскільки роблю білд для різних OS: Windows, Linux, Mac. Операційна система зазначається за допомогою &lt;code>--runtime&lt;/code> ключа. Список всіх runtime можна отримати &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#rid-graph">тут&lt;/a>. &lt;code>--output&lt;/code> ключ вказую в яку директорію покласти бінарні файли.&lt;br>
Також можна добавити ключ &lt;code>/p:PublishSingleFile=true&lt;/code> для того щоб в результаті отримати тільки один exe файл. Також цей ключ можна добавити в налаштуваннях проекту в Visual Studio.&lt;/p>
&lt;h2 id="deployment-конфігурація">Deployment Конфігурація&lt;/h2>
&lt;p>&lt;code>before_deploy&lt;/code> секція викликається перед деплоєм для підготовки binary для релізу. На цьому етапі я роблю архів з бінарними файлами які отримав після білд для конжної операційної системи.&lt;/p>
&lt;p>В &lt;code>deploy&lt;/code> секції я використовую провайдер &lt;code>releases&lt;/code> який робить реліз на github. Список всіх провайдерів - &lt;a href="https://docs.travis-ci.com/user/deployment/">docs.travis-ci.com&lt;/a>. Для деплою потрібен github token. Згенерувати його можна на &lt;a href="https://github.com/settings/tokens">GitHub&lt;/a>. Далі ключ потрібно зберегти в конфігурації travis проекта. Для цього потрібно перейти в проект на &lt;a href="https://travis-ci.com/">Travis&lt;/a>. Відкрити проект/налаштування:
&lt;img src="https://i.imgur.com/nHrz23b.png" alt="Config">.&lt;/p>
&lt;p>В Environment Variables потрібно добавити згенерований ключ:
&lt;img src="https://i.imgur.com/wfnfkzi.png" alt="Token">
В &lt;code>file&lt;/code> потрібно вказати які файли мають бути задеплоїні використовуючи провайдер. &lt;code>skip_cleanup: true&lt;/code> має бути в &lt;code>true&lt;/code> для того щоб travis не очищав збілджені файли перед деплоєм. &lt;code>on.tags: true&lt;/code> означає що деплой запускати тільки на github теги.&lt;/p>
&lt;p>Після того як файл готовий потрібно зробити запушити зміни в мастер і білд автоматично запуститься. Але деплой не здійсниться. Далі на &lt;a href="https://github.com/">GitHub&lt;/a> потрібно зробити реліз для потрібного репозиторія. Як тільки реліз буде зроблено білд запуститься знову, але цього разу з деплоєм.&lt;/p>
&lt;p>В &lt;a href="https://travis-ci.com/">Travis&lt;/a> можна буде побачити такий результат:
&lt;img src="https://i.imgur.com/02OKZ1R.png" alt="Build">&lt;/p></content></item></channel></rss>