<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on mpostument.com</title><link>/ua/categories/devops/</link><description>Recent content in Devops on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 06 Feb 2021 18:14:40 +0200</lastBuildDate><atom:link href="/ua/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Ebs Auto Resize</title><link>/ua/2021/02/06/ebs-auto-resize/</link><pubDate>Sat, 06 Feb 2021 18:14:40 +0200</pubDate><guid>/ua/2021/02/06/ebs-auto-resize/</guid><description>Привіт!
Сьогодні зробимо скрипт для автоматичного ресайзу EBS volume за допомогою golang i AWS SDK version 2. Для того щоб це зробити потрібно виконати декілька кроків, отримати список волюмів, відфільтрувати тих в яких кількість вільної пам&amp;rsquo;яті менший ніж трешхолд, знайти ebs id який відповідає даному волюму. Зробити ресайз на заданий процент і збільшити розмір диску на файловій системі.
Розпочну з структури в якій буде зберігатись вся інформація по диску та вкажу всі потрібні імпорти.</description></item><item><title>Failed Asg Event Notification</title><link>/ua/2021/01/03/failed-asg-event-notification/</link><pubDate>Sun, 03 Jan 2021 17:57:36 +0200</pubDate><guid>/ua/2021/01/03/failed-asg-event-notification/</guid><description>Привіт!
Сьогодні хочу розказати як за допомогою AWS Lambda та Golang можна отримувати повідомлення в slack коли Autoscaling не зміг створити Ec2 сервер. Деплой я автоматизую за допомогою serverless.
Почнемо з інсталяцію node та serverless. Я використовую nvm для управління версіями node.
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash nvm install v14.15.3 npm install -g serverless Створю папку та ініціалізую в ній go модуль.
mkdir failed-asg cd failed-asg go mod init touch main.</description></item><item><title>Import Grafana Dashboards With Go</title><link>/ua/2020/12/23/import-grafana-dashboards-with-go/</link><pubDate>Wed, 23 Dec 2020 23:18:28 +0200</pubDate><guid>/ua/2020/12/23/import-grafana-dashboards-with-go/</guid><description>Привіт!
В попередньому пості я показував як можна експортувати дашборди з Grafana. Тепер подивимось як їх можна імпортувати в Grafana.
Як завжди на початку будуть імпорти та main функція
package grafana import ( &amp;#34;context&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;github.com/grafana-tools/sdk&amp;#34; ) func main() { } Додамо декілька параметрів:
var ( filesInDir []os.FileInfo rawBoard []byte err error grafanaURL string apiKey string directory string ) В filesInDir будуть зберігатись усі прочитані дашборди з файлової системи.</description></item><item><title>Export Grafana Dashboards With Go</title><link>/ua/2020/12/19/export-grafana-dashboards-with-go/</link><pubDate>Sat, 19 Dec 2020 18:27:35 +0200</pubDate><guid>/ua/2020/12/19/export-grafana-dashboards-with-go/</guid><description>Привіт!
Сьогодні подивимось як за допомогою go можна експортувати дашборди з Grafana. Для взаємодії з Grafana я використаю sdk. Sdk можна встановити за допомогою go get github.com/grafana-tools/sdk.
Почнемо писати код. На початку файлу буде package, імпорти та main функція
package main import ( &amp;#34;context&amp;#34; &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/grafana-tools/sdk&amp;#34; ) func main() { } ) Додамо декілька параметрів:
var ( boardLinks []sdk.FoundBoard rawBoard sdk.Board meta sdk.BoardProperties err error grafanaURL string apiKey string directory string ) В boardLinks будуть добавлятись ссилки на дашборди в Grafana.</description></item><item><title>Filter Ebs Snapshot By Date With Go</title><link>/ua/2020/12/05/filter-ebs-snapshot-by-date-with-go/</link><pubDate>Sat, 05 Dec 2020 17:53:29 +0200</pubDate><guid>/ua/2020/12/05/filter-ebs-snapshot-by-date-with-go/</guid><description>Привіт!
Сьогодні подивимось як можна фільтрувати ebs снепшоти по даті за допомогою golang.
Для початку створю папку і в ній ініціалізую go модуль
mkdir snapshotFilter cd snapshotFilter go mod init snapshotFilter Потрібно створити main.go в якому буде код. Почнемо з main функції
package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;sort&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/ec2&amp;#34; ) func main() { sess := session.Must(session.NewSession()) ec2Client := ec2.New(sess) filterDate := flag.String(&amp;#34;snapshot-date&amp;#34;, time.Now().Format(time.RFC3339), &amp;#34;Provide snapshot creation date&amp;#34;) snapshotName := flag.</description></item><item><title>Custom Dns for Github Pages</title><link>/ua/2020/11/02/custom-dns-for-github-pages/</link><pubDate>Mon, 02 Nov 2020 16:19:52 +0200</pubDate><guid>/ua/2020/11/02/custom-dns-for-github-pages/</guid><description>Привіт!
Сьогодні хочу показати як для GithubPages сайту можна добавити кастомне доменне ім&amp;rsquo;я.
Для цього потрібно виконати декілька кроків. Розпочнемо з реєстрації доменного імені. Для реєстрації яя вибрав Namecheap.
Перейшовши на Namecheap в пошуку потрібно ввести доменне ім&amp;rsquo;я яке хочу купити і знайшовиши додати його в корзину.
Біля мого доменного імені написано Taken це тому що я вже його купив.
Після того як доменне ім&amp;rsquo;я куплено потрібно перейти в свій профіль та натиснути Manage.</description></item><item><title>Deploy Hugo With Github Actions and Pages</title><link>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</link><pubDate>Wed, 21 Oct 2020 20:19:26 +0300</pubDate><guid>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</guid><description>Привіт!
Хочу показати як можна деплоїти hugo вебсайт в GitHub Pages за допомогою github actions. Саме так я деплою свій сайт.
Install Hugo Hugo можна скачати з GitHub. І покласти binary в файл в потрібну локацію.
GitHub setup В github потрібно створити два репозиторія, один в якому будуть зберігатись .md файли та тема (content-mpostument в моєму випадку) в інший буде використовуватись для GitHub Pages, в який буде деплоїтись сайт згенерований hugo (mpostument.</description></item><item><title>Nightfall Dlp Configuration</title><link>/ua/2020/09/30/nightfall-dlp-configuration/</link><pubDate>Wed, 30 Sep 2020 21:52:21 +0300</pubDate><guid>/ua/2020/09/30/nightfall-dlp-configuration/</guid><description>Привіт!
Хочу сьогодні розказати про DLP Nightfall. Він дозволяє сканувати Pull Request на наявність на наявність персональної інформації, api ключів та інше.
Github Action Для Github Nightfall дає Action який можна використовувати для сканування Pull Request та Merge в бренчу. Для початку потрібно створити в корені репозиторія папку .github\workflows і в цій папці створити файл dlp.yml. Назва файлу можу бути будь якою.
name: nightfalldlp on: push: branches: - master pull_request: jobs: run-nightfalldlp: name: nightfalldlp runs-on: ubuntu-latest steps: - name: Checkout Repo Action uses: actions/checkout@v2 - name: nightfallDLP action step uses: nightfallai/nightfall_dlp_action@v0.</description></item><item><title>Deploy to ec2 with codedship</title><link>/ua/2020/09/16/deploy-to-ec2-with-codeship/</link><pubDate>Wed, 16 Sep 2020 20:24:40 +0300</pubDate><guid>/ua/2020/09/16/deploy-to-ec2-with-codeship/</guid><description>Привіт!
Сьогодні я хочу показати як можна задеплоїти код на AWS EC2 за допомогою CodeShip Basic. Для цього я використаю інтеграцію Codeship з AWS CodeDeploy.
CodeShip Configuration Спочатку потрібо добавити репозиторій в CodeShip і перейти в вкладу Deploy. І добавити branch з якої відбувається деплой на ec2. В моєму випадку branch master вже є добавлена. Після того як branch добавлено потрібно проскролити в низ до секції Deployment. І вибрати CodeDeploy Одразу зявиться наступна форма Тут потрібно ввести Access and Secret Keys користувача який буде здійснювати деплой.</description></item><item><title>Get Lambdas in Vpc With Go</title><link>/ua/2020/09/01/get-lambdas-in-vpc-with-go/</link><pubDate>Tue, 01 Sep 2020 17:40:16 +0300</pubDate><guid>/ua/2020/09/01/get-lambdas-in-vpc-with-go/</guid><description>Привіт!
Сьогодні я хочу розказати як за допомогою go можна отримати список всіх AWS Lambda які знаходяться в VPC. Для початку потрібно встановити golang. Останю версію можна завантажити з офіційного сайту.
Після того як golang встановлено створіть папку для скриптів mkdir awsscripts
Далі потрібно ініціалізувати go.mod файл. Цей файл в якому зберігаються всі залежності на стороні пакети, і одночасно зробить go код модулем. І в майбутньому його можна буде встановлювати за допомогою go get.</description></item><item><title>Build Dotnet Core With Travis</title><link>/ua/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/ua/2020/08/31/build-dotnet-core-with-travis/</guid><description>Привіт!
Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою Travis.
Для початку потрібно створити Travis акаунт. Для цього потрібно залогуватись вашим GitHub акаунтом. .travis.yml Конфігурація Наступним кроком потрібно створити .travis.yml файл в корені репозиторія. Приклад мого конфігураційного файлу:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description></item></channel></rss>