<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net Core on mpostument.com</title><link>/ua/tags/.net-core/</link><description>Recent content in .Net Core on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 13 Oct 2020 13:42:30 +0300</lastBuildDate><atom:link href="/ua/tags/.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Three Ways to Organize Code in BlazorServer</title><link>/ua/2020/10/13/three-ways-to-organize-code/</link><pubDate>Tue, 13 Oct 2020 13:42:30 +0300</pubDate><guid>/ua/2020/10/13/three-ways-to-organize-code/</guid><description>Привіт!
Хочу розказати як можна організовувати код в BlazorServer.
Code in client Перший варіант це зберігати код на клієнті (в razor файлі). Візьмемо Counter.razor файл в якому поєднується html та c# код.
@page &amp;#34;/counter&amp;#34; &amp;lt;h1&amp;gt;Counter&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Current count: @currentCount&amp;lt;/p&amp;gt; &amp;lt;button class=&amp;#34;btn btn-primary&amp;#34; @onclick=&amp;#34;IncrementCount&amp;#34;&amp;gt;Click me&amp;lt;/button&amp;gt; @code { private int currentCount = 0; private void IncrementCount() { currentCount++; } } На цій сторінці є приватна зміна currentCount та метод IncrementCount який інкрементує цю зміну.</description></item><item><title>Create Page in Blazor</title><link>/ua/2020/10/12/create-page-in-blazor/</link><pubDate>Mon, 12 Oct 2020 11:57:31 +0300</pubDate><guid>/ua/2020/10/12/create-page-in-blazor/</guid><description>Привіт!
Сьогодні розглянемо як можна створити нову сторінку в BlazorServer та добавити її в меню.
Add new page Для цього натисність правою кнопкою миші на папці Pages і виберіть Razor Component...
Зявиться наступне вікно в якому потрібно обрати назву та натиснути Add
Сторінка буде створена з наступним контентом:
&amp;lt;h3&amp;gt;Test1&amp;lt;/h3&amp;gt; @code { } Для того щоб її можна було відкрити в браузері на початку файла потрібно добавити @page &amp;quot;/test1&amp;quot; де test1 це назва ендпоінта.</description></item><item><title>Blazor Server Logging</title><link>/ua/2020/10/10/blazor-server-logging/</link><pubDate>Sat, 10 Oct 2020 19:01:49 +0300</pubDate><guid>/ua/2020/10/10/blazor-server-logging/</guid><description>Привіт!
Сьогодні подивимось як налаштовувати логування в BlazorServer.
Одразу після створення проекту в корені проекту буде файл appsettings.json.
{ &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; } }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34; } Саме тут вкзаано налаштування логування. LogLevel починається з Default який має значення Information. Це означає що по замовчуванні лог левел буде Information. Далі йде Microsoft з рівнем Warning, відповідно для namespace Microsoft рівень логування буде Warning. І в самому кінці Microsoft.</description></item><item><title>Blazor Dependency Injection</title><link>/ua/2020/10/07/blazor-dependency-injection/</link><pubDate>Wed, 07 Oct 2020 21:15:25 +0300</pubDate><guid>/ua/2020/10/07/blazor-dependency-injection/</guid><description>Привіт!
Сьогодні поговоримо як працює dependency injection в blazor server. Якщо ви знайому з dependency injection в asp.net core то відміностей тут немає. Dependency injection налаштовуєтся в Startup.cs в корені проекта. Одразу після створення проекту це матиме ось такий вигляд
public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;(); } Розберемо що тут відбуваться.
services.AddRazorPages() - добавляє підтримку razor pages в проект
services.AddServerSideBlazor() - добавляє підтримку blazor server в проект
services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;() - реєструє клас WeatherForecastService в DI.</description></item><item><title>Blazor Server Error Handling</title><link>/ua/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/ua/2020/10/06/blazor-server-error-handling/</guid><description>Привіт!
Сьогодні подивимось як можна поміняти еррор меседжі в Blazor Server. Є два типи помилок неіснуює сторінка або ексепшин. Можна міняти повідомлення яке буде відображатись в двох випадках. Першим розглянемо як поміняти повідомлення яке відображається користувача у випадку ексепшина.
Exception Error В файлі Pages/_Host.cshtml даний участок відповідає за відображення помилки:
&amp;lt;div id=&amp;#34;blazor-error-ui&amp;#34;&amp;gt; &amp;lt;environment include=&amp;#34;Staging,Production&amp;#34;&amp;gt; An error has occurred. This application may no longer respond until reloaded. &amp;lt;/environment&amp;gt; &amp;lt;environment include=&amp;#34;Development&amp;#34;&amp;gt; An unhandled exception has occurred.</description></item><item><title>Blazor Server Routing</title><link>/ua/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/ua/2020/10/01/blazor-server-routing/</guid><description>Привіт! Сьогодні я хочу розказати як працює роутінг в Blazor Server.
Роутінг починається в файлі Startup.cs. За це відбовідає наступний код
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); прийшов з asp.net і означає додати route matching в middleware pipeline. Цей middleware дивиться в набір ендпоінтів зазначених в аплікації і вибирає той який найбілше підходить базуючись на реквесті.
app.UseEndpoints() додає ендпоніт в middleware pipeline. Він запускає делегат якому відповідає ендпоінт.</description></item><item><title>Build Dotnet Core With Travis</title><link>/ua/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/ua/2020/08/31/build-dotnet-core-with-travis/</guid><description>Привіт!
Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою Travis.
Для початку потрібно створити Travis акаунт. Для цього потрібно залогуватись вашим GitHub акаунтом. .travis.yml Конфігурація Наступним кроком потрібно створити .travis.yml файл в корені репозиторія. Приклад мого конфігураційного файлу:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description></item></channel></rss>