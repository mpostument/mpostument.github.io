<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on mpostument.com</title><link>/ua/tags/hugo/</link><description>Recent content in Hugo on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 02 Nov 2020 16:19:52 +0200</lastBuildDate><atom:link href="/ua/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Dns for Github Pages</title><link>/ua/2020/11/02/custom-dns-for-github-pages/</link><pubDate>Mon, 02 Nov 2020 16:19:52 +0200</pubDate><guid>/ua/2020/11/02/custom-dns-for-github-pages/</guid><description>Привіт!
Сьогодні хочу показати як для GithubPages сайту можна добавити кастомне доменне ім&amp;rsquo;я.
Для цього потрібно виконати декілька кроків. Розпочнемо з реєстрації доменного імені. Для реєстрації яя вибрав Namecheap.
Перейшовши на Namecheap в пошуку потрібно ввести доменне ім&amp;rsquo;я яке хочу купити і знайшовиши додати його в корзину.
Біля мого доменного імені написано Taken це тому що я вже його купив.
Після того як доменне ім&amp;rsquo;я куплено потрібно перейти в свій профіль та натиснути Manage.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні хочу показати як для GithubPages сайту можна добавити кастомне доменне ім&amp;rsquo;я.&lt;br>
Для цього потрібно виконати декілька кроків. Розпочнемо з реєстрації доменного імені. Для реєстрації яя вибрав &lt;a href="https://www.namecheap.com/">Namecheap&lt;/a>.&lt;br>
Перейшовши на Namecheap в пошуку потрібно ввести доменне ім&amp;rsquo;я яке хочу купити і знайшовиши додати його в корзину.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/J1e9EI6.png" alt="Namecheap">&lt;/p>
&lt;p>Біля мого доменного імені написано &lt;code>Taken&lt;/code> це тому що я вже його купив.&lt;/p>
&lt;p>Після того як доменне ім&amp;rsquo;я куплено потрібно перейти в свій профіль та натиснути &lt;code>Manage&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nUFrMWl.png" alt="NamecheapDns">&lt;/p>
&lt;p>В секції &lt;code>Advanced DNS&lt;/code> я добавлю декілька записів зігдно Github документації. Актуальні адреса також можна знайти в &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">документації&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AeXmmxb.png" alt="Dns">&lt;/p>
&lt;p>Список A рекордів які потрібно створити:&lt;/p>
&lt;ul>
&lt;li>185.199.108.153&lt;/li>
&lt;li>185.199.109.153&lt;/li>
&lt;li>185.199.110.153&lt;/li>
&lt;li>185.199.111.153&lt;/li>
&lt;/ul>
&lt;p>Також потрібно створити CNAME який буде вказувати на GitHub Pages url. В моєму випадку це &lt;code>mpostument.github.io&lt;/code>.&lt;/p>
&lt;p>Наступним кроком потрібно добавити файл з іменем CNAME в корінь GitHub Pages репозиторія. В першому рядку цього файла потрібно написати нове доменне ім&amp;rsquo;я, для мене це &lt;code>mpostument.com&lt;/code>. Я використовую статичний сайт генератор Hugo з Github Actions. (Прочитати про це можна в моєму попередньому &lt;a href="https://mpostument.com/2020/10/21/deploy-hugo-with-github-actions-and-pages/">пості&lt;/a>). Для того щоб CNAME потрапив в корінь після деплою його потрібно покласти в папку static.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6zaK6Q1.png" alt="CNAME">&lt;/p>
&lt;p>Останім кроком я вкажу нове доменне ім&amp;rsquo;я в налаштуваннях GitHub Pages репозитрія. Для цього відкрити репозиторій та натиснути &lt;code>Settings&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yXAnZ0q.png" alt="Settings">&lt;/p>
&lt;p>Там знайти секцію яка відповідає за GitHub Pages. В полі Custom domain вказати своє значення та натиснути Save. Опція Enforce HTTPS стане доступною протягом 24 годин, рекомендую її також включити.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PE502gk.png" alt="PagesSetting">&lt;/p>
&lt;p>І тепер перейшовши на &lt;code>mpostument.github.io&lt;/code> я буду одразу перенаправлений на &lt;code>mpostument.com&lt;/code>&lt;/p></content></item><item><title>Deploy Hugo With Github Actions and Pages</title><link>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</link><pubDate>Wed, 21 Oct 2020 20:19:26 +0300</pubDate><guid>/ua/2020/10/21/deploy-hugo-with-github-actions-and-pages/</guid><description>Привіт!
Хочу показати як можна деплоїти hugo вебсайт в GitHub Pages за допомогою github actions. Саме так я деплою свій сайт.
Install Hugo Hugo можна скачати з GitHub. І покласти binary в файл в потрібну локацію.
GitHub setup В github потрібно створити два репозиторія, один в якому будуть зберігатись .md файли та тема (content-mpostument в моєму випадку) в інший буде використовуватись для GitHub Pages, в який буде деплоїтись сайт згенерований hugo (mpostument.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Хочу показати як можна деплоїти hugo вебсайт в GitHub Pages за допомогою github actions. Саме так я деплою свій сайт.&lt;/p>
&lt;h2 id="install-hugo">Install Hugo&lt;/h2>
&lt;p>Hugo можна скачати з &lt;a href="https://github.com/gohugoio/hugo/releases">GitHub&lt;/a>. І покласти binary в файл в потрібну локацію.&lt;/p>
&lt;h2 id="github-setup">GitHub setup&lt;/h2>
&lt;p>В github потрібно створити два репозиторія, один в якому будуть зберігатись .md файли та тема (content-mpostument в моєму випадку) в інший буде використовуватись для GitHub Pages, в який буде деплоїтись сайт згенерований hugo (mpostument.github.io).&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/GnsuIEm.png" alt="Repository">&lt;/p>
&lt;p>В &lt;code>mpostument.github.io&lt;/code> код буде деплоїтись через github actions. Руками зміни сюди вноситись не будуть.&lt;/p>
&lt;p>За допомогою hugo створю новий сайт. Буде створена нова директорія &lt;code>hugodemo&lt;/code> в ній ініціалізую git репозиторій та добавлю remote на &lt;code>content-mpostument&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">hugo new site hugodemo
cd hugodemo
git init
git remote add origin git@github.com:mpostument/content-mpostument.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер потрібно вибрати тему для сайту. Теми можна подивитись на &lt;a href="https://themes.gohugo.io/">themes.gohugo&lt;/a>&lt;/p>
&lt;p>Для свого сайту я обрав тему &lt;a href="https://github.com/panr/hugo-theme-terminal/">Terminal&lt;/a>. Тему можна скачати архівом і розпакувати в папку &lt;code>themes&lt;/code> або добавити як submodule. Я добавлю як submodule для того щоб завжди мати останню версію теми.&lt;/p>
&lt;p>&lt;code>git submodule add https://github.com/panr/hugo-theme-terminal.git themes/terminal&lt;/code>.&lt;/p>
&lt;p>Зазвичай до кожної теми йде приклад конфігураційного файлу. Я скопіюю його з github сторінки і збережу в файлі &lt;code>config.toml&lt;/code>. Далі можна його підлаштовувати під свої потреби.&lt;/p>
&lt;p>Тепер можна запустити сайт і подивитись як він виглядатиме &lt;code>hugo serve -D&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yFdQHA5.png" alt="HugoExample">&lt;/p>
&lt;h2 id="github-actions">Github Actions&lt;/h2>
&lt;p>Для того щоб GitHub actions працював, в корені репозиторія потрібно створити папку &lt;code>.github/workflows&lt;/code> в якій створити yml файл з конфігурацією для Actions. В &lt;code>on&lt;/code> секції я вказую запускати білд тільки на push в master бренчу.&lt;/p>
&lt;p>В &lt;code>steps&lt;/code> я викликаю по черзі декілька actions. Починається pipeline з клонування репозиторія. Після цього я викликаю &lt;code>git submodule update --init --recursive&lt;/code> для того щоб оновити тему за допомогою submodule. Наступним кроком встановлюю потрібну версії hugo та викликаю &lt;code>hugo --minify&lt;/code> для того щоб згененрувати статичний сайт з .md файлів та теми. І останім кроком я деплою контент з &lt;code>./public&lt;/code> директорії. Вона з&amp;rsquo;являється після виконання команди &lt;code>hugo --minify&lt;/code>. Як параметри також потрібно передати ім&amp;rsquo;я git користувача, емейл, бренчу та репозиторій в яку здійснювати деплой.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CI&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Git checkout&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2.3.3&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Update theme&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git submodule update --init --recursive&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2.4.13&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.76.5&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3.7.3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">personal_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GH_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">mpostument/mpostument.github.io&lt;/span>
&lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;span style="color:#f92672">user_name&lt;/span>: &lt;span style="color:#ae81ff">mpostument&lt;/span>
&lt;span style="color:#f92672">user_email&lt;/span>: &lt;span style="color:#ae81ff">777rip777@gmail.com&lt;/span>
&lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер це можна закомітити в github репозиторій і при мерджі в мастер білд має запуститись.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1Vfl3A8.png" alt="ActionBuild">&lt;/p>
&lt;p>Як тільки білд пройшов нові файли мають одразу зявитись в Github Pages репозиторії &lt;code>mpostument.github.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/emHfquj.png" alt="DeployStatus">&lt;/p>
&lt;p>Через декілька хвилин вебсайт буде доступний за адресом &lt;code>mpostument.github.io&lt;/code>&lt;/p></content></item></channel></rss>