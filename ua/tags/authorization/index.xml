<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authorization on mpostument.com</title><link>/ua/tags/authorization/</link><description>Recent content in Authorization on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Oct 2020 19:04:41 +0300</lastBuildDate><atom:link href="/ua/tags/authorization/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Server Authorization</title><link>/ua/2020/10/17/blazor-server-authorization/</link><pubDate>Sat, 17 Oct 2020 19:04:41 +0300</pubDate><guid>/ua/2020/10/17/blazor-server-authorization/</guid><description>Привіт!
Сьогодні подивимось як добавити авторизацію в Blazor Server. Для початку створимо новий проект в якому включемо автентифікацію.
В проекті з автентифікацією присутні декілька додаткових файлів, які відповідають за автентифікацію. Також в конфігураційному файлі буде добавлено connection string до бази даних.
&amp;#34;ConnectionStrings&amp;#34;: { &amp;#34;DefaultConnection&amp;#34;: &amp;#34;Server=(localdb)\\mssqllocaldb;Database=aspnet-BlazorAuth-BD4B8646-B1A3-438C-8FFC-8C3A29438C24;Trusted_Connection=True;MultipleActiveResultSets=true&amp;#34; }, В package management консолі потрібно запустити команду Update-Database для того щоб створити базу даних та потрібні таблиці.
Тепер можна запустити аплікацію і спробувати залогуватись.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьогодні подивимось як добавити авторизацію в Blazor Server.
Для початку створимо новий проект в якому включемо автентифікацію.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AlAyKDU.png" alt="Auth">&lt;/p>
&lt;p>В проекті з автентифікацією присутні декілька додаткових файлів, які відповідають за автентифікацію. Також в конфігураційному файлі буде добавлено connection string до бази даних.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json"> &lt;span style="color:#e6db74">&amp;#34;ConnectionStrings&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;span style="color:#f92672">&amp;#34;DefaultConnection&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Server=(localdb)\\mssqllocaldb;Database=aspnet-BlazorAuth-BD4B8646-B1A3-438C-8FFC-8C3A29438C24;Trusted_Connection=True;MultipleActiveResultSets=true&amp;#34;&lt;/span>
}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>В package management консолі потрібно запустити команду &lt;code>Update-Database&lt;/code> для того щоб створити базу даних та потрібні таблиці.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KxYmGW2.png" alt="Update-Database">&lt;/p>
&lt;p>Тепер можна запустити аплікацію і спробувати залогуватись.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/81FVZaw.gif" alt="Login">&lt;/p>
&lt;p>Тепер можна добавити ролі для того щоб обмежувати доступ до певних сторінок в залежності від ролі.&lt;/p>
&lt;h2 id="autorization">Autorization&lt;/h2>
&lt;p>Підтримку ролей потрібно добавити в &lt;code>Startup.cs&lt;/code> в методі &lt;code>ConfigureService&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> services.AddDefaultIdentity&amp;lt;IdentityUser&amp;gt;(options =&amp;gt; options.SignIn.RequireConfirmedAccount = &lt;span style="color:#66d9ef">true&lt;/span>)
.AddRoles&amp;lt;IdentityRole&amp;gt;()
.AddEntityFrameworkStores&amp;lt;ApplicationDbContext&amp;gt;();
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generate-roles">Generate Roles&lt;/h2>
&lt;p>Добавлю новий razor компонент в папку &lt;code>Pages&lt;/code>. При переходні на цю сторінку буду створюватись базові ролі, вона буде доступна за шляхом &lt;code>/addroles&lt;/code>. Також потрібно за допомогою DI взяти декілька обєктів.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/addroles&amp;#34;&lt;/span>
@using Microsoft.AspNetCore.Identity
@inject RoleManager&amp;lt;IdentityRole&amp;gt; RoleManager
@inject UserManager&amp;lt;IdentityUser&amp;gt; UserManager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Створювати ролі буду за допомогою &lt;code>RoleManager&lt;/code>. Для початку створити список в якому будуть всі потрібні ролі. Далі іду циклом по усіх ролях, якщо роль існує то нічого не відбудеться. Якщо ж ні то нова роль буде створена.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task GenerateRoles()
{
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> adminRole = &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">string&lt;/span>[] roles = { AdminRole };
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> role &lt;span style="color:#66d9ef">in&lt;/span> roles)
{
&lt;span style="color:#66d9ef">var&lt;/span> roleExist = &lt;span style="color:#66d9ef">await&lt;/span> RoleManager.RoleExistsAsync(role);
&lt;span style="color:#66d9ef">if&lt;/span> (roleExist == &lt;span style="color:#66d9ef">false&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> RoleManager.CreateAsync(&lt;span style="color:#66d9ef">new&lt;/span> IdentityRole(role));
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-admin">Create admin&lt;/h2>
&lt;p>Наступним кроком потрібно додати користувачів до ролей. В &lt;code>appsettings.json&lt;/code> я добавлю параметр який буде містити email дефолтного адміна.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;777rip777@gmail.com&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Повернусь назад до &lt;code>addroles&lt;/code> сторінки і створю новий метод. Перевіряю чи користувач з емейлом з конфігураційног файлу існує, якщо так то добавляю його в групу &lt;code>Administrator&lt;/code>. Для того щоб можна було прочитати дані з конфігураційного файлу потрібо отримати об&amp;rsquo;єкт типу &lt;code>IConfiguration&lt;/code>. Вверху сторінки добавити &lt;code>@using Microsoft.Extensions.Configuration&lt;/code> i &lt;code>@inject IConfiguration config&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp"> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task AddAdmin()
{
&lt;span style="color:#66d9ef">var&lt;/span> user = &lt;span style="color:#66d9ef">await&lt;/span> UserManager.FindByEmailAsync(config.GetValue&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>));
&lt;span style="color:#66d9ef">if&lt;/span> (user != &lt;span style="color:#66d9ef">null&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> UserManager.AddToRoleAsync(user, &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Для того щоб ці методи викликались при відкриті сторінки потрібно викликати їх в методі &lt;code>OnParametersSetAsync&lt;/code>.&lt;/p>
&lt;p>Повний код &lt;code>addroles&lt;/code> сторінки&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/addroles&amp;#34;&lt;/span>
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Configuration
@inject RoleManager&amp;lt;IdentityRole&amp;gt; RoleManager
@inject UserManager&amp;lt;IdentityUser&amp;gt; UserManager
@inject IConfiguration config
@code {
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task OnParametersSetAsync()
{
&lt;span style="color:#66d9ef">await&lt;/span> GenerateRoles();
&lt;span style="color:#66d9ef">await&lt;/span> AddAdmin();
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task GenerateRoles()
{
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> adminRole = &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">string&lt;/span>[] roles = { adminRole };
&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> role &lt;span style="color:#66d9ef">in&lt;/span> roles)
{
&lt;span style="color:#66d9ef">var&lt;/span> roleExist = &lt;span style="color:#66d9ef">await&lt;/span> RoleManager.RoleExistsAsync(role);
&lt;span style="color:#66d9ef">if&lt;/span> (roleExist == &lt;span style="color:#66d9ef">false&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> RoleManager.CreateAsync(&lt;span style="color:#66d9ef">new&lt;/span> IdentityRole(role));
}
}
}
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> Task AddAdmin()
{
&lt;span style="color:#66d9ef">var&lt;/span> user = &lt;span style="color:#66d9ef">await&lt;/span> UserManager.FindByEmailAsync(config.GetValue&amp;lt;&lt;span style="color:#66d9ef">string&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;AdminUser&amp;#34;&lt;/span>));
&lt;span style="color:#66d9ef">if&lt;/span> (user != &lt;span style="color:#66d9ef">null&lt;/span>)
{
&lt;span style="color:#66d9ef">await&lt;/span> UserManager.AddToRoleAsync(user, &lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>);
}
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер відкривши в браузері сторінку &lt;code>/addroles&lt;/code> роль буде створена та користувач (якщо існує) буде добавлений в неї.&lt;/p>
&lt;h2 id="restrict-access-to-pages">Restrict access to pages&lt;/h2>
&lt;p>Тепер коли в нас є ролі можна обмежити доступ до сторінок. Для сторінки &lt;code>FetchData&lt;/code> я добавлю &lt;code>@attribute [Authorize]&lt;/code>. Це дасть доступ до сторінки тільки авторизованим користувачам. А для сторінки &lt;code>Counter&lt;/code> я вкажу &lt;code>@attribute [Authorize(Roles = &amp;quot;Administrator&amp;quot;)]&lt;/code> це дасть доступ до сторінки тільки користувачам з ролю адміністратор.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/KkE10dm.gif" alt="RolesDemo">&lt;/p>
&lt;p>Замінити Not Autorized помилку можна в &lt;code>App.razor&lt;/code> в &lt;code>NotAutorized&lt;/code> секції.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;CascadingAuthenticationState&amp;gt;
&amp;lt;Router AppAssembly=&lt;span style="color:#e6db74">&amp;#34;@typeof(Program).Assembly&amp;#34;&lt;/span>&amp;gt;
&amp;lt;Found Context=&lt;span style="color:#e6db74">&amp;#34;routeData&amp;#34;&lt;/span>&amp;gt;
&amp;lt;AuthorizeRouteView RouteData=&lt;span style="color:#e6db74">&amp;#34;@routeData&amp;#34;&lt;/span> DefaultLayout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NotAuthorized&amp;gt;
&amp;lt;h1&amp;gt;You don&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t have access&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Ask your administrator to give you permission&amp;lt;/p&amp;gt;
&amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeRouteView&amp;gt; /&amp;gt;
&amp;lt;/Found&amp;gt;
&amp;lt;NotFound&amp;gt;
&amp;lt;LayoutView Layout=&lt;span style="color:#e6db74">&amp;#34;@typeof(MainLayout)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;p&amp;gt;Sorry, there&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>s nothing at &lt;span style="color:#66d9ef">this&lt;/span> address.&amp;lt;/p&amp;gt;
&amp;lt;/LayoutView&amp;gt;
&amp;lt;/NotFound&amp;gt;
&amp;lt;/Router&amp;gt;
&amp;lt;/CascadingAuthenticationState&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://i.imgur.com/wULUE6F.png" alt="AuthError">&lt;/p>
&lt;p>Також можна повністю сховати елемент сайту для не зареєстрованих користувачів. В &lt;code>NavMenu.razor&lt;/code> я добавлю елементи меню в &lt;code>&amp;lt;AuthorizeView&amp;gt;&amp;lt;/AuthorizeView&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;top-row pl-4 navbar navbar-dark&amp;#34;&lt;/span>&amp;gt;
&amp;lt;a class=&lt;span style="color:#e6db74">&amp;#34;navbar-brand&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>&amp;gt;BlazorAuth&amp;lt;/a&amp;gt;
&amp;lt;button class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;navbar-toggler-icon&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style="color:#e6db74">&amp;#34;@NavMenuCssClass&amp;#34;&lt;/span> @onclick=&lt;span style="color:#e6db74">&amp;#34;ToggleNavMenu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;ul class=&lt;span style="color:#e6db74">&amp;#34;nav flex-column&amp;#34;&lt;/span>&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> Match=&lt;span style="color:#e6db74">&amp;#34;NavLinkMatch.All&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-home&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Home
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;AuthorizeView Roles=&lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;counter&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-plus&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Counter
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;AuthorizeView&amp;gt;
&amp;lt;li class=&lt;span style="color:#e6db74">&amp;#34;nav-item px-3&amp;#34;&lt;/span>&amp;gt;
&amp;lt;NavLink class=&lt;span style="color:#e6db74">&amp;#34;nav-link&amp;#34;&lt;/span> href=&lt;span style="color:#e6db74">&amp;#34;fetchdata&amp;#34;&lt;/span>&amp;gt;
&amp;lt;span class=&lt;span style="color:#e6db74">&amp;#34;oi oi-list-rich&amp;#34;&lt;/span> aria-hidden=&lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>&amp;gt;&amp;lt;/span&amp;gt; Fetch data
&amp;lt;/NavLink&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
@code {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> collapseNavMenu = &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> NavMenuCssClass =&amp;gt; collapseNavMenu ? &lt;span style="color:#e6db74">&amp;#34;collapse&amp;#34;&lt;/span> : &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> ToggleNavMenu()
{
collapseNavMenu = !collapseNavMenu;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Тепер &lt;code>counter&lt;/code> в меню будуть бачити тільки користувачі з ролю &lt;code>Administrator&lt;/code> а &lt;code>fetchdata&lt;/code> буде доступна зареєстрованим користувачам.&lt;/p>
&lt;p>В &lt;code>index&lt;/code> сторінку добавлю повідомлення користувачам щоб залогувались.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-csharp" data-lang="csharp">@page &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>
&amp;lt;AuthorizeView&amp;gt;
&amp;lt;Authorized&amp;gt;
&amp;lt;h1&amp;gt;Thank you &lt;span style="color:#66d9ef">for&lt;/span> logging &lt;span style="color:#66d9ef">in&lt;/span>&amp;lt;/h1&amp;gt;
&amp;lt;/Authorized&amp;gt;
&amp;lt;NotAuthorized&amp;gt;
&amp;lt;h3 class=&lt;span style="color:#e6db74">&amp;#34;text-danger&amp;#34;&lt;/span>&amp;gt;Log &lt;span style="color:#66d9ef">in&lt;/span> please&amp;lt;/h3&amp;gt;
&amp;lt;/NotAuthorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&amp;lt;AuthorizeView Roles=&lt;span style="color:#e6db74">&amp;#34;Administrator&amp;#34;&lt;/span>&amp;gt;
&amp;lt;Authorized&amp;gt;
Welcome back Admin
&amp;lt;/Authorized&amp;gt;
&amp;lt;/AuthorizeView&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Якщо користувача не залоговний буде повідомлення &lt;code>Log in please&lt;/code>. В інакшому випадку &lt;code>Thank you for logging in&lt;/code>. А якщо користувач admin то додатково буде повідомлення &lt;code>Welcome back Admin&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/ukU6vYG.gif" alt="RolesDemo2">&lt;/p></content></item></channel></rss>