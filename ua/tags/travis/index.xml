<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Travis on mpostument.com</title><link>/ua/tags/travis/</link><description>Recent content in Travis on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Aug 2020 13:24:40 +0300</lastBuildDate><atom:link href="/ua/tags/travis/index.xml" rel="self" type="application/rss+xml"/><item><title>Build Dotnet Core With Travis</title><link>/ua/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/ua/2020/08/31/build-dotnet-core-with-travis/</guid><description>Привіт!
Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою Travis.
Для початку потрібно створити Travis акаунт. Для цього потрібно залогуватись вашим GitHub акаунтом. .travis.yml Конфігурація Наступним кроком потрібно створити .travis.yml файл в корені репозиторія. Приклад мого конфігураційного файлу:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description><content>&lt;p>Привіт!&lt;/p>
&lt;p>Сьгодні я хочу показати як можна збілдити та задеплоїти .net core за допомогою &lt;a href="https://travis-ci.com/">Travis&lt;/a>.&lt;br>
Для початку потрібно створити Travis акаунт. Для цього потрібно &lt;a href="https://travis-ci.com/signin">залогуватись&lt;/a> вашим GitHub акаунтом.
&lt;img src="https://i.imgur.com/L9lOBo8.png" alt="Login">&lt;/p>
&lt;h2 id="travisyml-конфігурація">.travis.yml Конфігурація&lt;/h2>
&lt;p>Наступним кроком потрібно створити .travis.yml файл в корені репозиторія.
Приклад мого конфігураційного файлу:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">csharp&lt;/span>
&lt;span style="color:#f92672">mono&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
&lt;span style="color:#f92672">dotnet&lt;/span>: &lt;span style="color:#ae81ff">3.1.4&lt;/span>
&lt;span style="color:#f92672">solution&lt;/span>: &lt;span style="color:#ae81ff">awstaghelper.sln&lt;/span>
&lt;span style="color:#f92672">install&lt;/span>:
- &lt;span style="color:#ae81ff">dotnet restore&lt;/span>
&lt;span style="color:#f92672">script&lt;/span>:
- &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x64 --output win-x64&lt;/span>
- &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x86 --output win-x86&lt;/span>
- &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime linux-x64 --output linux-x64&lt;/span>
- &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime osx-x64 --output osx-x64&lt;/span>
&lt;span style="color:#f92672">before_deploy&lt;/span>:
- &lt;span style="color:#ae81ff">zip -r9 win-x64.zip win-x64&lt;/span>
- &lt;span style="color:#ae81ff">zip -r9 win-x86.zip win-x86&lt;/span>
- &lt;span style="color:#ae81ff">zip -r9 linux-x64.zip linux-x64&lt;/span>
- &lt;span style="color:#ae81ff">zip -r9 osx-x64.zip osx-x64&lt;/span>
&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">releases&lt;/span>
&lt;span style="color:#f92672">api_key&lt;/span>: &lt;span style="color:#ae81ff">$api_key&lt;/span>
&lt;span style="color:#f92672">file&lt;/span>:
- &lt;span style="color:#ae81ff">win-x64.zip&lt;/span>
- &lt;span style="color:#ae81ff">win-x86.zip&lt;/span>
- &lt;span style="color:#ae81ff">linux-x64.zip&lt;/span>
- &lt;span style="color:#ae81ff">osx-x64.zip&lt;/span>
&lt;span style="color:#f92672">skip_cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="net-конфігурація">.Net конфігурація&lt;/h2>
&lt;p>Тепер розберемо конфіг.&lt;br>
Починається yml з оголошення мови програмування &lt;code>language: csharp&lt;/code>. &lt;code>mono&lt;/code> стоїть none тому що використовується .net core. І останнє це версія .net core. В моєму випадку це &lt;code>dotnet: 3.1.4&lt;/code>. Також потрібно вказати назву солюшину &lt;code>solution: awstaghelper.sln&lt;/code>.&lt;/p>
&lt;h2 id="build-конфігурація">Build Конфігурація&lt;/h2>
&lt;p>Далі йдуть білд кроки. Крок &lt;code>install&lt;/code> використовується для встановлення необхідних залежностей. &lt;code>dotnet restore&lt;/code> є не обов&amp;rsquo;язковим оскільки в останіх версіях dotnet &lt;code>restore&lt;/code> команда автоматично викликається при &lt;code>build&lt;/code>. Тому в данному випадку &lt;code>install&lt;/code> можна повністю видалити.&lt;/p>
&lt;p>В &lt;code>script&lt;/code> секції відбувається білд аплікації. Команду &lt;code>build&lt;/code> я викликаю 4 рази оскільки роблю білд для різних OS: Windows, Linux, Mac. Операційна система зазначається за допомогою &lt;code>--runtime&lt;/code> ключа. Список всіх runtime можна отримати &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#rid-graph">тут&lt;/a>. &lt;code>--output&lt;/code> ключ вказую в яку директорію покласти бінарні файли.&lt;br>
Також можна добавити ключ &lt;code>/p:PublishSingleFile=true&lt;/code> для того щоб в результаті отримати тільки один exe файл. Також цей ключ можна добавити в налаштуваннях проекту в Visual Studio.&lt;/p>
&lt;h2 id="deployment-конфігурація">Deployment Конфігурація&lt;/h2>
&lt;p>&lt;code>before_deploy&lt;/code> секція викликається перед деплоєм для підготовки binary для релізу. На цьому етапі я роблю архів з бінарними файлами які отримав після білд для конжної операційної системи.&lt;/p>
&lt;p>В &lt;code>deploy&lt;/code> секції я використовую провайдер &lt;code>releases&lt;/code> який робить реліз на github. Список всіх провайдерів - &lt;a href="https://docs.travis-ci.com/user/deployment/">docs.travis-ci.com&lt;/a>. Для деплою потрібен github token. Згенерувати його можна на &lt;a href="https://github.com/settings/tokens">GitHub&lt;/a>. Далі ключ потрібно зберегти в конфігурації travis проекта. Для цього потрібно перейти в проект на &lt;a href="https://travis-ci.com/">Travis&lt;/a>. Відкрити проект/налаштування:
&lt;img src="https://i.imgur.com/nHrz23b.png" alt="Config">.&lt;/p>
&lt;p>В Environment Variables потрібно добавити згенерований ключ:
&lt;img src="https://i.imgur.com/wfnfkzi.png" alt="Token">
В &lt;code>file&lt;/code> потрібно вказати які файли мають бути задеплоїні використовуючи провайдер. &lt;code>skip_cleanup: true&lt;/code> має бути в &lt;code>true&lt;/code> для того щоб travis не очищав збілджені файли перед деплоєм. &lt;code>on.tags: true&lt;/code> означає що деплой запускати тільки на github теги.&lt;/p>
&lt;p>Після того як файл готовий потрібно зробити запушити зміни в мастер і білд автоматично запуститься. Але деплой не здійсниться. Далі на &lt;a href="https://github.com/">GitHub&lt;/a> потрібно зробити реліз для потрібного репозиторія. Як тільки реліз буде зроблено білд запуститься знову, але цього разу з деплоєм.&lt;/p>
&lt;p>В &lt;a href="https://travis-ci.com/">Travis&lt;/a> можна буде побачити такий результат:
&lt;img src="https://i.imgur.com/02OKZ1R.png" alt="Build">&lt;/p></content></item></channel></rss>