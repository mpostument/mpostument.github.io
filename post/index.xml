<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on mpostument.com</title><link>/post/</link><description>Recent content in Posts on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 07 Oct 2020 21:15:25 +0300</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Dependency Injection</title><link>/2020/10/07/blazor-dependency-injection/</link><pubDate>Wed, 07 Oct 2020 21:15:25 +0300</pubDate><guid>/2020/10/07/blazor-dependency-injection/</guid><description>Hi!
Today we will talk about how dependency injection works in blazor server. If you are familiar with dependency injection in asp.net core then there are no differences.
Dependency injection is configured in Startup.cs at the root of the project. After creating the project, it will look like this
public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;(); } Let&amp;rsquo;s see what happens here. services.AddRazorPages() - adds razor pages support to the project services.</description></item><item><title>Blazor Server Error Handling</title><link>/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/2020/10/06/blazor-server-error-handling/</guid><description>Hello!
Today we will look at how you can change the error messages in Blazor Server. There are two types of errors page does not exist and exception. You can change the message that will be displayed in both cases. The first thing to consider is how to change the message displayed to the user in the case of exception.
Exception Error In the Pages/_Host.cshtml file, this section is responsible for displaying the error:</description></item><item><title>Blazor Server Routing</title><link>/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/2020/10/01/blazor-server-routing/</guid><description>Hello! Today I want to tell you how routing works in Blazor Server.
Routing starts in the Startup.cs file. The following code will responsible for it
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); came from asp.net and adds route matching to the middleware pipeline. This middleware looks at the set of endpoints defined in the app, and selects the best match based on the request.
app.UseEndpoints() adds endpoint execution to the middleware pipeline.</description></item><item><title>Nightfall Dlp Configuration</title><link>/2020/09/30/nightfall-dlp-configuration/</link><pubDate>Wed, 30 Sep 2020 21:52:21 +0300</pubDate><guid>/2020/09/30/nightfall-dlp-configuration/</guid><description>Hi there!
I want to talk today about DLP Nightfall. The Nightfall DLP Action scans your code commits upon Pull Request for sensitive information - like credentials &amp;amp; secrets, PII, credit card numbers &amp;amp; more - and posts review comments to your code hosting service automatically. The Nightfall DLP Action is intended to be used as a part of your CI to simplify the development process, improve your security, and ensure you never accidentally leak secrets or other sensitive information via an accidental commit.</description></item><item><title>Deploy to ec2 with codedship</title><link>/2020/09/16/deploy-to-ec2-with-codeship/</link><pubDate>Wed, 16 Sep 2020 20:24:40 +0300</pubDate><guid>/2020/09/16/deploy-to-ec2-with-codeship/</guid><description>Hi there!
Today I want to show how you can deploy code on AWS EC2 using CodeShip Basic. To do this, I will use the integration of Codeship with AWS CodeDeploy.
CodeShip Configuration First you need to add a repository to CodeShip and go to the Deploy page Add a branch from which code will be deployed to ec2. In my case, the branch is master. Once the branch is added you need to scroll down to the Deployment section.</description></item><item><title>Get Lambdas in Vpc With Go</title><link>/2020/09/01/get-lambdas-in-vpc-with-go/</link><pubDate>Tue, 01 Sep 2020 17:40:16 +0300</pubDate><guid>/2020/09/01/get-lambdas-in-vpc-with-go/</guid><description>Hi there!
Today I want to tell you how with go you can get a list of all AWS Lambda that are in the VPC. First you need to install golang. The latest version can be downloaded from the official website.
Once golang is installed, create a folder for the scripts mkdir awsscripts
Next you need to initialize the go.mod file. This file stores all the dependencies on external packages, and at the same time will make the go code module.</description></item><item><title>Build Dotnet Core With Travis</title><link>/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/2020/08/31/build-dotnet-core-with-travis/</guid><description>Hello!
Today I want to show how you can build and deploy .net core with Travis.
To get started, you need to create a Travis account. This requires you to login with your GitHub account. .travis.yml Configuration The next step is to create a .travis.yml file in the root of the repository.
Example of my configuration file:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description></item></channel></rss>