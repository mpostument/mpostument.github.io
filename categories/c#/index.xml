<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on mpostument.com</title><link>/categories/c#/</link><description>Recent content in C# on mpostument.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Oct 2020 16:09:30 +0300</lastBuildDate><atom:link href="/categories/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>Blazor Forms</title><link>/2020/10/16/blazor-forms/</link><pubDate>Fri, 16 Oct 2020 16:09:30 +0300</pubDate><guid>/2020/10/16/blazor-forms/</guid><description>Hello!
Let&amp;rsquo;s see how you can create a form in BlazorServer.
Start with the model. I will create a file Models/User.cs, which will contain fields for the form.
namespace BlazorLearn.Models { public class User { public string UserName { get; set; } public string LastName { get; set; } public string Email { get; set; } public int Age { get; set; } public string Gender { get; set; } } } For the model to be available in razor components, it must be added to _Imports.</description></item><item><title>Events in Blazor</title><link>/2020/10/15/events-in-blazor/</link><pubDate>Thu, 15 Oct 2020 11:37:56 +0300</pubDate><guid>/2020/10/15/events-in-blazor/</guid><description>Hello!
Let&amp;rsquo;s see how you can transfer data from one component to another.
Button I will create a component called ThumbButton which will contain two buttons. Depending on which button is pressed, the corresponding method will be called and the data will be transferred to the parrent component. @Onclick specifies which method will be executed when the button is pressed.
To pass data to the parrent component, a property of type EventCallback&amp;lt;Thumb&amp;gt; is used, where Thumb is enum.</description></item><item><title>Component With Parameters</title><link>/2020/10/14/components-with-parameters/</link><pubDate>Wed, 14 Oct 2020 11:47:34 +0300</pubDate><guid>/2020/10/14/components-with-parameters/</guid><description>Hello!
Let&amp;rsquo;s see how you can use components in BlazorServer and pass parameters to them. To do this, make two classes Student and School which will be displayed on the page. These classes will be in the Models folder.
Model using System.Collections.Generic; namespace BlazorLearn.Models { public class School { public string Name { get; set; } public List&amp;lt;Student&amp;gt; Students { get; set; } } } namespace BlazorLearn.Models { public class Student { public string FirstName { get; set; } public string LastName { get; set; } } } Razor Component Now I will create razor components that will be responsible for displaying the data.</description></item><item><title>Create Page in Blazor</title><link>/2020/10/12/create-page-in-blazor/</link><pubDate>Mon, 12 Oct 2020 11:57:31 +0300</pubDate><guid>/2020/10/12/create-page-in-blazor/</guid><description>Hello!
Today we will look at how you can create a new page in BlazorServer and add it to the menu.
Add new page To do this, right-click on the Pages folder and select Razor Component...
The following window will appear in which you need to enter the name and click Add.
The page will be created with the following content:
&amp;lt;h3&amp;gt;Test1&amp;lt;/h3&amp;gt; @code { } To be able to open it in the browser at the beginning of the file you need to add @page&amp;quot; /test1&amp;quot; where test1 is the name of the endpoint.</description></item><item><title>Blazor Server Logging</title><link>/2020/10/10/blazor-server-logging/</link><pubDate>Sat, 10 Oct 2020 19:01:49 +0300</pubDate><guid>/2020/10/10/blazor-server-logging/</guid><description>Hi!
Today we will see how to configure logging in BlazorServer. Immediately after creating a project, the appsettings.json file will be in the root of the project.
{ &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { &amp;#34;Default&amp;#34;: &amp;#34;Information&amp;#34;, &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;, &amp;#34;Microsoft.Hosting.Lifetime&amp;#34;: &amp;#34;Information&amp;#34; } }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34; } This is where logging settings are set. LogLevel starts with Default which have value Information. This means that the default log level will be Information. Next is Microsoft with the Warning level, respectively for namespace Microsoft the login level will be Warning.</description></item><item><title>Blazor Dependency Injection</title><link>/2020/10/07/blazor-dependency-injection/</link><pubDate>Wed, 07 Oct 2020 21:15:25 +0300</pubDate><guid>/2020/10/07/blazor-dependency-injection/</guid><description>Hi!
Today we will talk about how dependency injection works in blazor server. If you are familiar with dependency injection in asp.net core then there are no differences.
Dependency injection is configured in Startup.cs at the root of the project. After creating the project, it will look like this
public void ConfigureServices(IServiceCollection services) { services.AddRazorPages(); services.AddServerSideBlazor(); services.AddSingleton&amp;lt;WeatherForecastService&amp;gt;(); } Let&amp;rsquo;s see what happens here. services.AddRazorPages() - adds razor pages support to the project services.</description></item><item><title>Blazor Server Error Handling</title><link>/2020/10/06/blazor-server-error-handling/</link><pubDate>Tue, 06 Oct 2020 19:31:30 +0300</pubDate><guid>/2020/10/06/blazor-server-error-handling/</guid><description>Hello!
Today we will look at how you can change the error messages in Blazor Server. There are two types of errors page does not exist and exception. You can change the message that will be displayed in both cases. The first thing to consider is how to change the message displayed to the user in the case of exception.
Exception Error In the Pages/_Host.cshtml file, this section is responsible for displaying the error:</description></item><item><title>Blazor Server Routing</title><link>/2020/10/01/blazor-server-routing/</link><pubDate>Thu, 01 Oct 2020 21:09:00 +0300</pubDate><guid>/2020/10/01/blazor-server-routing/</guid><description>Hello! Today I want to tell you how routing works in Blazor Server.
Routing starts in the Startup.cs file. The following code will responsible for it
app.UseRouting(); app.UseEndpoints(endpoints =&amp;gt; { endpoints.MapBlazorHub(); endpoints.MapFallbackToPage(&amp;#34;/_Host&amp;#34;); }); app.UseRouting(); came from asp.net and adds route matching to the middleware pipeline. This middleware looks at the set of endpoints defined in the app, and selects the best match based on the request.
app.UseEndpoints() adds endpoint execution to the middleware pipeline.</description></item></channel></rss>