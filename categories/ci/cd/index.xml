<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Maksym Postument</title><link>/categories/ci/cd/</link><description>Recent content in CI/CD on Maksym Postument</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/categories/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom Dns for Github Pages</title><link>/2020/11/02/custom-dns-for-github-pages-copy/</link><pubDate>Mon, 02 Nov 2020 16:19:52 +0200</pubDate><guid>/2020/11/02/custom-dns-for-github-pages-copy/</guid><description>Hello!
Today I want to show how you can add custom DNS for the GithubPages site.
This requires a few steps. Let&amp;rsquo;s start with domain name registration. I chose Namecheap to register my domain name. Open Namecheap website and in the search you need to enter the name you want to buy. Once you found what you are looking for and add it to your card.
It says Taken next to my domain name because I already bought it.</description><content>&lt;p>Hello!&lt;/p>
&lt;p>Today I want to show how you can add custom DNS for the GithubPages site.&lt;br>
This requires a few steps. Let&amp;rsquo;s start with domain name registration. I chose &lt;a href="https://www.namecheap.com/">Namecheap&lt;/a> to register my domain name.
Open Namecheap website and in the search you need to enter the name you want to buy. Once you found what you are looking for and add it to your card.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/J1e9EI6.png" alt="Namecheap">&lt;/p>
&lt;p>It says &lt;code>Taken&lt;/code> next to my domain name because I already bought it.&lt;/p>
&lt;p>Once the domain name is purchased you need to go to your profile and click &lt;code>Manage&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/nUFrMWl.png" alt="NamecheapDns">&lt;/p>
&lt;p>In the &lt;code>Advanced DNS&lt;/code> section, I will add some records according to the Github documentation. Current addresses can also be found in &lt;a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">documentation&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/AeXmmxb.png" alt="Dns">&lt;/p>
&lt;p>List of A records to create:&lt;/p>
&lt;ul>
&lt;li>185.199.108.153&lt;/li>
&lt;li>185.199.109.153&lt;/li>
&lt;li>185.199.110.153&lt;/li>
&lt;li>185.199.111.153&lt;/li>
&lt;/ul>
&lt;p>You also need to create a CNAME that will point to the GitHub Pages url. In my case it is &lt;code>mpostument.github.io&lt;/code>.&lt;/p>
&lt;p>The next step is to add a file named CNAME to the root of the GitHub Pages repository. In the first line of this file you need to write a new domain name, for me it is &lt;code>mpostument.com&lt;/code>. I use a static site generator Hugo with Github Actions (You can read about it in my previous &lt;a href="https://mpostument.com/2020/10/21/deploy-hugo-with-github-actions-and-pages/">post&lt;/a>). In order for CNAME to get to the root after deployment, it must be placed in the static folder.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/6zaK6Q1.png" alt="CNAME">&lt;/p>
&lt;p>The last step is to specify a new domain name in the GitHub Pages repository settings. To do this, open the repository and click &lt;code>Settings&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yXAnZ0q.png" alt="Settings">&lt;/p>
&lt;p>And find the section responsible for GitHub Pages. In the Custom domain field, specify your value and click Save. The Enforce HTTPS option will be available within 24 hours, I recommend that you also enable it.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/PE502gk.png" alt="PagesSetting">&lt;/p>
&lt;p>And now after going to &lt;code>mpostument.github.io&lt;/code> you will be immediately redirected to &lt;code>mpostument.com&lt;/code>&lt;/p></content></item><item><title>Deploy Hugo With Github Actions and Pages</title><link>/2020/10/21/deploy-hugo-with-github-actions-and-pages/</link><pubDate>Wed, 21 Oct 2020 20:19:26 +0300</pubDate><guid>/2020/10/21/deploy-hugo-with-github-actions-and-pages/</guid><description>Hello!
I want to show how you can deploy a hugo website in GitHub Pages using github actions. That&amp;rsquo;s how I build my site.
Install Hugo Hugo can be downloaded from GitHub. Put the binary in the desired location.
GitHub setup In github you need to create two repositories, one is for .md files and the theme (content-mpostument in my case) and another will be used for GitHub Pages in which will be stored generated website with hugo (mpostument.</description><content>&lt;p>Hello!&lt;/p>
&lt;p>I want to show how you can deploy a hugo website in GitHub Pages using github actions. That&amp;rsquo;s how I build my site.&lt;/p>
&lt;h2 id="install-hugo">Install Hugo&lt;/h2>
&lt;p>Hugo can be downloaded from &lt;a href="https://github.com/gohugoio/hugo/releases">GitHub&lt;/a>. Put the binary in the desired location.&lt;/p>
&lt;h2 id="github-setup">GitHub setup&lt;/h2>
&lt;p>In github you need to create two repositories, one is for .md files and the theme (content-mpostument in my case) and another will be used for GitHub Pages in which will be stored generated website with hugo (mpostument.github.io).&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/GnsuIEm.png" alt="Repository">&lt;/p>
&lt;p>Code will be deployed to &lt;code>mpostument.github.io&lt;/code> repository via github actions. No manual changes allowed here.&lt;/p>
&lt;p>Create new site with hugo. Hugo will create a new directory with the site name. After directory is created initialize empty git project and connect it with github repository&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>hugo new site hugodemo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd hugodemo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git remote add origin git@github.com:mpostument/content-mpostument.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you need to choose a theme for the site. Themes can be reviewed at &lt;a href="https://themes.gohugo.io/">themes.gohugo&lt;/a>&lt;/p>
&lt;p>I chose &lt;a href="https://github.com/panr/hugo-theme-terminal/">Terminal&lt;/a> theme for my site . The theme can be downloaded and unpacked in the &lt;code>themes&lt;/code> folder or added as a submodule. I will add as a submodule to always have the latest version of the theme.&lt;/p>
&lt;p>&lt;code>git submodule add https://github.com/panr/hugo-theme-terminal.git themes/terminal&lt;/code>.&lt;/p>
&lt;p>Usually, each theme has an example configuration file. I will copy it from the github theme page and save it in the &lt;code>config.toml&lt;/code> file. You can adjust it to your needs.&lt;/p>
&lt;p>Now you can start the site and see how it will look like &lt;code>hugo serve -D&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/yFdQHA5.png" alt="HugoExample">&lt;/p>
&lt;h2 id="github-actions">Github Actions&lt;/h2>
&lt;p>For GitHub actions to work, at the root of the repository, you need to create a folder &lt;code>.github/workflows&lt;/code> in which you create a yml configuration file for Github Actions.&lt;/p>
&lt;p>In the &lt;code>on&lt;/code> section, I specify to run the build only on push to the master branch.&lt;/p>
&lt;p>In &lt;code>steps&lt;/code> I call several actions in order. The pipeline begins with cloning the repository. After that, I call &lt;code>git submodule update --init --recursive&lt;/code> to update the theme using submodule. The next step is to install the required version of hugo and call &lt;code>hugo --minify&lt;/code> to generate a static site from .md files and theme. And the last step is to deploy content from the &lt;code>./Public&lt;/code> directory. Directory is created after executing the command &lt;code>hugo --minify&lt;/code>. As parameters, you also need to pass the git username, email, branch and repository to which do deployment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">CI&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Git checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2.3.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Update theme&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">git submodule update --init --recursive&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup hugo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2.4.13&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.76.5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-gh-pages@v3.7.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">personal_token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GH_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">external_repository&lt;/span>: &lt;span style="color:#ae81ff">mpostument/mpostument.github.io&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_dir&lt;/span>: &lt;span style="color:#ae81ff">./public&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user_name&lt;/span>: &lt;span style="color:#ae81ff">mpostument&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">user_email&lt;/span>: &lt;span style="color:#ae81ff">777rip777@gmail.com&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">publish_branch&lt;/span>: &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now it can be committed to the github repository. Merge to the master branch will start build.&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/1Vfl3A8.png" alt="ActionBuild">&lt;/p>
&lt;p>As soon as the build passed, the new files should immediately appear in the Github Pages repository &lt;code>mpostument.github.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/emHfquj.png" alt="DeployStatus">&lt;/p>
&lt;p>In a few minutes, the website will be available at &lt;code>mpostument.github.io&lt;/code>&lt;/p></content></item><item><title>Nightfall Dlp Configuration</title><link>/2020/09/30/nightfall-dlp-configuration/</link><pubDate>Wed, 30 Sep 2020 21:52:21 +0300</pubDate><guid>/2020/09/30/nightfall-dlp-configuration/</guid><description>Hi there!
I want to talk today about DLP Nightfall. The Nightfall DLP Action scans your code commits upon Pull Request for sensitive information - like credentials &amp;amp; secrets, PII, credit card numbers &amp;amp; more - and posts review comments to your code hosting service automatically. The Nightfall DLP Action is intended to be used as a part of your CI to simplify the development process, improve your security, and ensure you never accidentally leak secrets or other sensitive information via an accidental commit.</description><content>&lt;p>Hi there!&lt;/p>
&lt;p>I want to talk today about DLP Nightfall. The Nightfall DLP Action scans your code commits upon Pull Request for sensitive information - like credentials &amp;amp; secrets, PII, credit card numbers &amp;amp; more - and posts review comments to your code hosting service automatically. The Nightfall DLP Action is intended to be used as a part of your CI to simplify the development process, improve your security, and ensure you never accidentally leak secrets or other sensitive information via an accidental commit.&lt;br>
I tried to implement DLP with Github Actions and want to share my results&lt;/p>
&lt;h2 id="github-action">Github Action&lt;/h2>
&lt;p>Nightfall gives GitHub Action which can be used to scan Pull Request and Push in the branch.
First you need to create a &lt;code>.github\workflows&lt;/code> folder in the root of the repository and create a dlp.yml file in this folder. The file name can be any.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfalldlp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">push&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">branches&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run-nightfalldlp&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfalldlp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout Repo Action&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">nightfallDLP action step&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">nightfallai/nightfall_dlp_action@v0.0.7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">NIGHTFALL_API_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.NIGHTFALL_API_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GITHUB_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">EVENT_BEFORE&lt;/span>: &lt;span style="color:#ae81ff">${{ github.event.before }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>on&lt;/code> section it is specified that to start scanning on push in master branch and on Pull Request.
Action has two steps, the first is to clone the repository the second is to run the scanner.
Several env variables are required for the scanner to work. GITHUB_TOKEN is used so that the scanner can add comments to the PR it should have value &lt;code>secrets.GITHUB_TOKEN&lt;/code>&lt;br>
&lt;img src="https://i.imgur.com/13N6AjR.png" alt="Comment">&lt;/p>
&lt;p>EVENT_BEFORE is required if the scanner starts at a push event. And its value must be &lt;code>github.event.before&lt;/code>&lt;br>
NIGHTFALL_API_KEY the last required variable, you can get it by registering at &lt;a href="https://nightfall.ai/api">nightfall.ai&lt;/a>. Once NIGHTFALL_API_KEY is received it needs to be added to GitHub Secrets&lt;br>
&lt;img src="https://i.imgur.com/8y5a2FH.png" alt="Secret">&lt;/p>
&lt;h2 id="nightfall-configuration">Nightfall Configuration&lt;/h2>
&lt;p>Now when i finished with GitHub Action I need to create a configuration file for Nightfall.
To do this, create a folder named &lt;code>.nightfalldlp&lt;/code> and the file &lt;code>config.json&lt;/code> in it.
List of detectors that support nightfall.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;detectors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CREDIT_CARD_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;PHONE_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;API_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CRYPTOGRAPHIC_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RANDOMLY_GENERATED_TOKEN&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_SOCIAL_SECURITY_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;AMERICAN_BANKERS_CUSIP_ID&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_BANK_ROUTING_MICR&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ICD9_CODE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ICD10_CODE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_DRIVERS_LICENSE_NUMBER&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;US_PASSPORT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;EMAIL_ADDRESS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;IP_ADDRESS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>My configuration file looks shorter because the full one generates a lot of false-positive alarms. Example&lt;br>
&lt;img src="https://i.imgur.com/0EGejo0.png" alt="FalseErrorSample">&lt;/p>
&lt;p>Example of my file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;detectors&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;API_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;CRYPTOGRAPHIC_KEY&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;RANDOMLY_GENERATED_TOKEN&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;EMAIL_ADDRESS&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;IP_ADDRESS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now it&amp;rsquo;s all you need to push configuration for scanner to start.&lt;br>
Even with this configuration, the scanner gives a lot of false-positive alarm results&lt;br>
&lt;img src="https://i.imgur.com/bJ1WWR2.png" alt="Error">
For example, I get such a error
&lt;code>Suspicious content detected (3:***, type IP_ADDRESS)&lt;/code> on &lt;code>&amp;quot;arn:aws:s3:::usershome/{{name}}-{{data}}/*&amp;quot;&lt;/code>&lt;br>
Or &lt;code>Suspicious content detected (ke********, type RANDOMLY_GENERATED_TOKEN)&lt;/code> on&lt;br>
&lt;code>&amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:kms:us-east-1:000000000:key/6a2b4d78-oy69-44ab-ce3d-43faca87fd14&amp;quot;&lt;/code>.&lt;br>
Despite the false-positive part, the scanner allows you to find cluttered passwords and api keys&lt;/p></content></item><item><title>Deploy to ec2 with codedship</title><link>/2020/09/16/deploy-to-ec2-with-codeship/</link><pubDate>Wed, 16 Sep 2020 20:24:40 +0300</pubDate><guid>/2020/09/16/deploy-to-ec2-with-codeship/</guid><description>Hi there!
Today I want to show how you can deploy code on AWS EC2 using CodeShip Basic. To do this, I will use the integration of Codeship with AWS CodeDeploy.
CodeShip Configuration First you need to add a repository to CodeShip and go to the Deploy page Add a branch from which code will be deployed to ec2. In my case, the branch is master. Once the branch is added you need to scroll down to the Deployment section.</description><content>&lt;p>Hi there!&lt;/p>
&lt;p>Today I want to show how you can deploy code on AWS EC2 using CodeShip Basic.
To do this, I will use the integration of Codeship with AWS CodeDeploy.&lt;/p>
&lt;h2 id="codeship-configuration">CodeShip Configuration&lt;/h2>
&lt;p>First you need to add a repository to CodeShip and go to the Deploy page
&lt;img src="https://i.imgur.com/Zz2v8aZ.png" alt="Coeship1">&lt;/p>
&lt;p>Add a branch from which code will be deployed to ec2. In my case, the branch is master.
Once the branch is added you need to scroll down to the Deployment section. And select CodeDeploy
&lt;img src="https://i.imgur.com/KVCmUDn.png" alt="Codeship2">&lt;/p>
&lt;p>The following form will appear immediately
&lt;img src="https://i.imgur.com/rfdRxKl.png" alt="CodeshipForm3">
Here you need to enter the Access and Secret Keys of the AWS user who will perform the deployment. The user must have access to s3 and CodeDeploy.
In the region, specify your AWS Region where the application is located. For me it&amp;rsquo;s us-east-1.&lt;br>
&lt;code>Application&lt;/code>, &lt;code>GroupName&lt;/code> will need to be created in AWS. The value should be chosen so that it is clear which application will be deployed. &lt;code>S3 Bucket&lt;/code> can be as a general bucket where all deployments will be carried out or choose an individual name for one application. In my case it&amp;rsquo;s CodeShipEc2Deployment.&lt;br>
And last is &lt;code>Config Name&lt;/code> you need to specify the configuration name in CodeDeploy. I will take the standard &lt;code>CodeDeployDefault.AllAtOnce&lt;/code>. This means that the deployment will occur at once on all ec2 instances&lt;/p>
&lt;p>Now with CodeShip configuration over and you can start setting up AWS.&lt;/p>
&lt;h2 id="codedeploy-configuration">CodeDeploy Configuration&lt;/h2>
&lt;p>Open CodeDeploy service in AWS.&lt;br>
&lt;img src="https://i.imgur.com/cTv6l3Y.png" alt="CodeDeploy">
In the Deployment section, find Applications&lt;br>
&lt;img src="https://i.imgur.com/BAZ6E6d.png" alt="Applications">&lt;br>
Click Create Application. Enter the same name as in Codeship in the &lt;code>Application&lt;/code> section. Select EC2 as the Compute Platform
&lt;img src="https://i.imgur.com/zAXUxuF.png" alt="CreateApplication">
Open the newly created &lt;code>Application&lt;/code> and in &lt;code>Deployment Groups&lt;/code> select &lt;code>Create Deployment Group&lt;/code>&lt;br>
&lt;img src="https://i.imgur.com/5wfA0VU.png" alt="DeploymentGroup">
In &lt;code>Deployment group name&lt;/code> it is necessary to enter the same name which was specified in CodeShip.
In &lt;code>ServiceRole&lt;/code> choose a role that will allow to carry out deployment on ec2. A good example of the role can be found &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html">here&lt;/a>.&lt;/p>
&lt;p>In &lt;code>Environment configuration&lt;/code>, select ec2. Then you need to specify which tag to use for the ec2 filter. For example it can be Key = Name, Value = ProductionApplication. Here you can use any tags that are on your ec2.&lt;br>
&lt;img src="https://i.imgur.com/ffGKRQV.png" alt="Ec2Filter">&lt;/p>
&lt;h2 id="ec2-configuration">Ec2 Configuration&lt;/h2>
&lt;p>Another role will be required for ec2. What accesses it should have can be found &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-ec2-configure.html#instances-ec2-configure-2-verify-instance-profile-permissions">here&lt;/a>&lt;/p>
&lt;p>Once the role is created, it must be added to the ec2 instance. To do this, select the desired ec2. Right-click and select Attach Role
&lt;img src="https://i.imgur.com/uaIUcyg.png" alt="AttachRole">&lt;br>
Find the role you created above in the list.&lt;br>
Now you need to put the CodeDeploy Agent on the ec2 instance. To do this, connect to the server via ssh
&lt;code>ssh -i private_key ec2-user@IP&lt;/code>. In my example i am using AmazonLinux. If you have another OS commands can be found &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-cli.html">here&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Download the installation &lt;code>wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install&lt;/code>&lt;/li>
&lt;li>Provide permissions &lt;code>sudo chmod + x install&lt;/code>&lt;/li>
&lt;li>Install agent &lt;code>sudo ./install auto&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>You can check if the agent is running with the &lt;code>sudo service codedeploy-agent status&lt;/code> command. The result should be similar to &lt;code>The AWS CodeDeploy agent is running as PID 32466&lt;/code>.&lt;br>
You also need to create a folder that will contain the application &lt;code>mkdir /opt/application&lt;/code> and give permission to the user. I use ec2-user &lt;code>chown ec2-user:ec2-user /opt/application&lt;/code>&lt;/p>
&lt;h2 id="deployment-script">Deployment Script&lt;/h2>
&lt;p>At the root of the repository you need to create a file called &lt;code>appspec.yml&lt;/code>. Here you can find all options supported by this file - &lt;a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html">AWS&lt;/a>.&lt;/p>
&lt;p>Here is an example of my file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">os&lt;/span>: &lt;span style="color:#ae81ff">linux&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">files&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">source&lt;/span>: &lt;span style="color:#ae81ff">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">destination&lt;/span>: &lt;span style="color:#ae81ff">/opt/application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">permissions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">object&lt;/span>: &lt;span style="color:#ae81ff">/opt/application&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">owner&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">group&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">hooks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">AfterInstall&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">location&lt;/span>: &lt;span style="color:#ae81ff">ops/deploybuild.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runas&lt;/span>: &lt;span style="color:#ae81ff">ec2-user&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>version&lt;/code> has a default value and does not need to be changed. 0.0 The only value is supported.&lt;br>
&lt;code>os&lt;/code> can have two values windows or linux, my os is EC2 AmazonLinux, so I choose linux.&lt;br>
&lt;code>files&lt;/code> indicates which files need to be copied to the server during deployment. &lt;code>source: /&lt;/code> means copy all files. &lt;code>destination&lt;/code> is where to copy.&lt;br>
The &lt;code>permissions&lt;/code> specifies which permissions should have the files just copied.&lt;br>
In the &lt;code>hooks&lt;/code> section is the application configuration. I use the &lt;code>AfterInstall&lt;/code> hook. This means that the script will run after the &lt;code>Install&lt;/code> step. During the &lt;code>Install&lt;/code> step, the files are copied to the server. The &lt;code>location&lt;/code> specifies which script to run and from its user. &lt;code>runas&lt;/code> means that the script will be called on behalf of the user. By default, the code-deploy agent is started from the root and runas at this stage will switch to ec2-user. You can also change the code-deploy agent to run immediately from ec2-user.&lt;/p>
&lt;p>Next we need a deployment script. In the repository, I created the ops folder because the path to my script is &lt;code>- location: ops/deploybuild.sh&lt;/code>. And in this folder I created a script &lt;code>deploybuild.sh&lt;/code>.
I have a node.js application for which you need to do yarn install and npm start. I will add it to the script&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>cd /opt/application
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn --ignore-engines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd examples/demo-app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">(&lt;/span>npm run start-prod&lt;span style="color:#f92672">)&lt;/span>&amp;amp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is very basic script to start application. For production is better to use pm2 package to start js application.&lt;br>
Now after every push to master branch code will be deployed.&lt;/p></content></item><item><title>Build Dotnet Core With Travis</title><link>/2020/08/31/build-dotnet-core-with-travis/</link><pubDate>Mon, 31 Aug 2020 13:24:40 +0300</pubDate><guid>/2020/08/31/build-dotnet-core-with-travis/</guid><description>Hello!
Today I want to show how you can build and deploy .net core with Travis.
To get started, you need to create a Travis account. This requires you to login with your GitHub account. .travis.yml Configuration The next step is to create a .travis.yml file in the root of the repository.
Example of my configuration file:
language: csharp mono: none dotnet: 3.1.4 solution: awstaghelper.sln install: - dotnet restore script: - dotnet build --configuration Release --runtime win-x64 --output win-x64 - dotnet build --configuration Release --runtime win-x86 --output win-x86 - dotnet build --configuration Release --runtime linux-x64 --output linux-x64 - dotnet build --configuration Release --runtime osx-x64 --output osx-x64 before_deploy: - zip -r9 win-x64.</description><content>&lt;p>Hello!&lt;/p>
&lt;p>Today I want to show how you can build and deploy .net core with &lt;a href="https://travis-ci.com/">Travis&lt;/a>.&lt;br>
To get started, you need to create a Travis account. This requires you to &lt;a href="https://travis-ci.com/signin">login&lt;/a> with your GitHub account.
&lt;img src="https://i.imgur.com/L9lOBo8.png" alt="Login">&lt;/p>
&lt;h2 id="travisyml-configuration">.travis.yml Configuration&lt;/h2>
&lt;p>The next step is to create a .travis.yml file in the root of the repository.&lt;br>
Example of my configuration file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">language&lt;/span>: &lt;span style="color:#ae81ff">csharp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">mono&lt;/span>: &lt;span style="color:#ae81ff">none&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">dotnet&lt;/span>: &lt;span style="color:#ae81ff">3.1.4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">solution&lt;/span>: &lt;span style="color:#ae81ff">awstaghelper.sln&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">install&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet restore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">script&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x64 --output win-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime win-x86 --output win-x86&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime linux-x64 --output linux-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dotnet build --configuration Release --runtime osx-x64 --output osx-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">before_deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 win-x64.zip win-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 win-x86.zip win-x86&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 linux-x64.zip linux-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">zip -r9 osx-x64.zip osx-x64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">deploy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">provider&lt;/span>: &lt;span style="color:#ae81ff">releases&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">api_key&lt;/span>: &lt;span style="color:#ae81ff">$api_key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">file&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">win-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">win-x86.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">linux-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">osx-x64.zip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">skip_cleanup&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="net-configuration">.Net configuration&lt;/h2>
&lt;p>Now let&amp;rsquo;s review the config.&lt;br>
Yml begins with the declaration of the programming language &lt;code>language: csharp&lt;/code>. &lt;code>mono&lt;/code>
is none because the .net core is used. And the last is the .net core version. In my case it is &lt;code>dotnet: 3.1.4&lt;/code>. You also need to specify the name of the solution &lt;code>solution: awstaghelper.sln&lt;/code>.&lt;/p>
&lt;h2 id="build-configuration">Build configuration&lt;/h2>
&lt;p>Next are the build steps. Step &lt;code>install&lt;/code> used to install the necessary dependencies. &lt;code>dotnet restore&lt;/code> is optional as in the latest versions of dotnet &lt;code>restore&lt;/code> the command is automatically called when &lt;code>build&lt;/code>. Because of this, &lt;code>install&lt;/code> can be completely removed.&lt;/p>
&lt;p>In the &lt;code>script&lt;/code> section there is a build of application. I call the &lt;code>build&lt;/code> command 4 times because I build for different OS: Windows, Linux, Mac. The operating system is indicated by the &lt;code>--runtime&lt;/code> key. A list of all runtime is available &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog#rid-graph">here&lt;/a>. &lt;code>--output&lt;/code> key specifies in which directory to put binaries.
You can also add the &lt;code>/p:PublishSingleFile=true&lt;/code> key to get only one exe file as a result per OS. You can also add this key in the project settings in Visual Studio.&lt;/p>
&lt;h2 id="deployment-configuration">Deployment configuration&lt;/h2>
&lt;p>The &lt;code>before_deploy&lt;/code> section is called before the deployment to prepare the binary for release. At this stage, I make an archive with the binaries that I received after the builds for the each operating system.&lt;/p>
&lt;p>In the &lt;code>deploy&lt;/code> section I use the &lt;code>releases&lt;/code> provider which releases on github. List of all providers - &lt;a href="https://docs.travis-ci.com/user/deployment/">docs.travis-ci.com&lt;/a>. A github token is required for deployment. You can generate it on &lt;a href="https://github.com/settings/tokens">GitHub&lt;/a>.
The key must be saved in the travis configuration of the project. To do this, go to the project on &lt;a href="https://travis-ci.com/">Travis&lt;/a>. Open project/settings:
&lt;img src="https://i.imgur.com/nHrz23b.png" alt="Config">.&lt;/p>
&lt;p>In Environment Variables you need to add the generated key:
&lt;img src="https://i.imgur.com/wfnfkzi.png" alt="Token">
In &lt;code>file&lt;/code> you need to specify which files should be deployed using the provider. &lt;code>skip_cleanup: true&lt;/code> must be &lt;code>true&lt;/code> so that travis does not clear whipped files before deployment. &lt;code>on.tags: true&lt;/code> means that the deployment run only on github tags.&lt;/p>
&lt;p>Once the file is ready you need to make run changes to the master and the build will start automatically. But the deployment will not take place, because it trigger only on tags. On &lt;a href="https://github.com/">GitHub&lt;/a> you need to create release for the desired repository. Once the release is done the build will run again, but this time with a deployment.&lt;/p>
&lt;p>In &lt;a href="https://travis-ci.com/">Travis&lt;/a> you can see the following result:
&lt;img src="https://i.imgur.com/02OKZ1R.png" alt="Build">&lt;/p></content></item></channel></rss>